{section}
{column:width=3%}
{column}
{column}
\\
{panel:borderColor=#f7681a|borderWidth=2}
\\
{center}
h3. {color:#f7681a}この記事では Chef のアーキテクチャについて紹介します。
Chef を使う際に Chef サーバ・ノード・Chef ワークステーションがどのように機能し、どのように関わり合っているのかを説明します。

オープンソース版の Chef サーバを使っているなら、[Chef サーバ]も読む価値があるかもしれません。こちらでは Chef サーバの構成要素についてかなり詳しく解説しています。{color}
{center}
\\
{panel}

h1. Chef サーバ・ノード・ワークステーション
{float:right|background=#eeeeee|border=4px solid #d7d4c3|padding=10px|margin=10px}
{center}!chef-basics-nwc.png|align=center,vspace=4,hspace=16!{center}  
{float}
Chef を使ってインフラを管理するなら、3 種類のホストを扱うことになります。Chef サーバ、ノード、Chef ワークステーションの 3 つです。

h4. {color:navy}Chef サーバ{color}
{color:#f7681a}Chef サーバはインフラの設定データを集中的に保存する場所です。{color}Chef サーバはノードを設定するために必要なデータを保存し、検索できるようにします。検索はパワフルなツールであり、このおかげでデータに基づき動的にノードに設定適用することができるのです。ノードや Chef ワークステーションは REST API 経由でデータにアクセスします。Chef サーバの WebUI を利用して、ウェブ・インタフェース経由でインフラを管理するという選択肢もあります。{color:#f7681a}Chef ホスティングの利用者{color}なら、Opscode のサービスとして管理されているホスティング Chef サーバがあり、[http://manage.opscode.com] から WebUI インタフェースにアクセスすることができます。

h4. {color:navy}ノード{color}

{color:#f7681a}ノードとは chef-client 経由で設定が行われるすべてのホストのことです。{color}chef-client はノードで起動すると、Chef サーバと通信してそのノードを設定するために必要な情報を取得します。Chef サーバから見れば、ノードは単なる *実行リスト* (そのノードにどんな設定が適用されるべきかを決めてくれるレシピとロールの一覧) と属性 (ノード自体に関するデータの集合) にすぎません。ノードは {{chef-client}} というソフトウェアを実行するマシンなので時々「クライアント」と呼ばれることもあります。(ここでいうクライアントは、Chef サーバの API に対して認証を求める API クライアントとは別のものです。)

ノードを「クライアント」と呼ぶときには、chef-client という実行ファイルが「API クライアント」内にある ID 情報を利用して認証・権限取得の API リクエストを送り、サーバに「ノード」オブジェクトを保存するということを暗に示しています。

h4. {color:navy}Chef ワークステーション{color}
{color:#f7681a}Chef ワークステーションはクックブックや他の設定データを修正するのに使うホストですーー典型的なパターンでは、システム管理者がローカルで利用しているワークステーションが使われます。{color}このようなワークステーションには 2 つのキーとなる構成要素があります：
# Chef に同梱されている knife という実行ファイル
# インフラの設定ドキュメントを含むレポジトリ

あとで説明しますが、設定ドキュメントにはクックブックやデータバッグ、ロールなどが含まれます。設定資料はバージョン管理システムで管理されているのが理想的です。{{knife}} を使えば、ワークステーションから Chef サーバに設定データをアップロードしたり、必要なときには各ノードに SSH で通信することもできます。

h1. クライアント・認証・権限管理
{float:right|background=#eeeeee|border=4px solid #d7d4c3|padding=10px|margin=10px|width=240px}
{center}
{color:navy}*インフラにおける Chef サーバの役割はシンプルです。*{color}

アップロードされた設定情報を保存し、認証済みの API クライアントが求めてきたらその情報を返してやるのです。
{center}
{float}

{color:#f7681a}Chef は API クライアントと認証・権限管理システムを利用して、権限のある人だけが設定情報を参照・更新できることを保証しています。{color} *Chef クライアント (ノード上で起動) と knife (ワークステーション上で起動) は API クライアントを利用して Chef サーバと通信します。*

言い換えるなら、 _Chef クライアント_ は 'chef-client' というソフトウェアであり実行ファイルそのものを指すのに対し、 _API クライアント_ というのは API リクエスト毎に認証・権限取得を行うのに必要な、暗号化された ID 情報を示すオブジェクトのことなのです。

リクエストが既知の API クライアントからのものであることを保証するために、Chef は公開鍵暗号を利用します。Chef ホスティングではきめ細かい鍵の管理も行えます。API クライアントは関連する秘密鍵暗号キーと公開鍵暗号キーを持っています。Chef の実行ファイルが行う API リクエストは毎回、特定の API クライアントであることを示す秘密鍵で署名されています。Chef サーバはクライアントの公開鍵と照らし合わせてリクエストが信頼できるかを検証します。

Chef サーバは、リクエストが信頼できるかの検証が済んだら、今度はリクエストを行おうとしているクライアントが、、今リクエストしようとしているアクション (クックブックのアップロードでも実行リストの取得でもなんでも) を行う権限があるかどうかを確かめます。この過程は*権限管理*として知られています。オープンソース版の Chef と Chef ホスティングでは、権限管理の仕組みに違いがあります。

h4. {color:navy}オープンソース版 Chef{color}

{color:#f7681a}オープンソース版の Chef では、特定の API クライアントに「管理者クライアント」 (admin clients) という印がついています。{color}さまざまなアクションに対して権限があるかどうかは、管理者の印がついているかどうかで決定されます。管理者クライアントは knife 経由でリクエストを送る際に使われ、可能なかぎりすべてのアクションを実行する権限を持っています。管理者でないクライアントには限られた権限しかなく、インフラの中のノードによって使われます。

h4. {color:navy}Chef ホスティング{color}

{color:#f7681a}Chef ホスティングは、クライアント毎 (またはユーザ事) に管理が可能な、もっと複雑な権限管理システムを採用しています{color}。このシステムの中では、API クライアントとユーザは Chef ホスティングに保存されたオブジェクト (ノードのデータやクックブックのデータ等) に対して *CREATE*、*READ*、*UPDATE*、*DELETE*、*GRANT* を実行する権限を持つことができます。Chef ホスティングは、そのクライアントがリクエストしているアクションに対して適切な権限を持っているか確かめます。権限管理を簡単にするために、Chef ホスティングにはいくつかのデフォルト・グループが提供されており、それぞれの役割に応じて適切な権限を付与されています。ユーザやクライアントは「管理者」グループに所属し、すべてのオブジェクトに対してすべての権限を持っています。人間ではない API クライアント (ノードによって利用されるものとか) は自動で「クライアント」グループに分類されますが、オープンソース版 Chef の管理者でないクライアントと似たような権限を持っています。人間である「ユーザ」グループに分類され、ユーザはオープンソース版 Chef の管理者クライアントと似たような権限を持つこともあります。詳しくは[Chef ホスティングの権限管理]を参照してください。

{color:#f7681a}chef-client が新しいノードで起動するとき、Chef はそのノードに対して自動的に API クライアントを作成するように設計されています。{color}なので、ユーザや管理者クライアントが適切に設定されてさえいれば、knife を使ったり WebUI や管理コンソールにログインすることができるし、ほとんどの場合は API クライアントや認証、権限管理について細かいことを気にする必要はほとんどありません。

h1. Chef ホスティング
!gears.png|align=right,hspace=6,vspace=6!
{color:#f7681a}Chef ホスティングには、よりきめ細かな権限管理システムだけでなく、オープンソース版の Chef にない 2 つの概念があります：ユーザと組織です。{color}

h4. {color:navy}ユーザ{color}

{color:#f7681a}ユーザはあなたが想像する通りのものです：Chef ホスティングに接続するために人間が利用する認証情報です。{color}
クライアントと同じで、ユーザはプログラムから api.opscode.com や knife を呼び出して、Chef ホスティングに接続することができます。またそれだけでなく、パスワードを利用して Chef ホスティングが表示してくれるさまざまなウェブページを閲覧することも可能です。

ユーザは組織と関連づけられており、所属ユーザがその組織とどんなやり取りができるか、その組織を管理することができるかを組織に設定することができます。しかしながら、API クライアントと違って、ユーザは 2 つ以上の組織と関連づけることができるので、たとえばコンサルタントなら顧客ごとに別々の組織に属するということが可能です。認証や権限管理について考えるならば、ユーザはただの API クライアントだと考えるのが一番手っ取り早いです。

ユーザは Opscode 内のウェブページではどこでも 1 つのアカウントを持っています。同じユーザ名・パスワードで Chef ホスティングの管理者コンソールでも、Opscode のクックブック用サイトでも、help.opscode.com にでもログインすることができます。

h4. {color:navy}組織{color} 

{color:#f7681a}Chef ホスティングに登録するとき、ユーザ・アカウントと組織を作成します。{color} 組織は、会社全体でも所属部署でも、管理しようとしているインフラでサーバをグループ化できる表現ならなんでも構いません。組織は、Chef ホスティングが課金を行う単位です。ユーザを除いて、複数の組織で共有できるものはありません。ある組織の API クライアントが別の組織のノードデータを読み取ることができるということはあり得ません。{color:#f7681a}Chef ホスティングを利用するときには、それぞれの組織が Opscode の手によって管理されるプライベートな Chef サーバを持っている、という感じになります。

h1. まとめ

* Chef サーバは集中的に設定情報を保存する場所。
* ノードとワークステーションは API クライアントを利用して Chef サーバと通信し、API クライアントが REST API へのリクエストを生成する。
* すべての API リクエストで認証チェック・権限チェックが行われている。

\\
\\
\\
\\
{column}
{column:width=5%}
{column}
{section}
{section}
----
{column:width=45%}

!leftarrow.png|align=left,hspace=4! 
[Chef の基本]

{column}
{column:width=40%}
{column}

{column:width=15%}

!rightarrow.png|align=right,hspace=4! 
[コアとなる要素]

\\
\\
{column}
{section}
