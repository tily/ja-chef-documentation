{section}
{column:width=3%}
{column}
{column}

!attributes.jpg|align=left,vspace=40,hspace=18,thumbnail!

h1. Overview

h5. {color:#f7681a}Attributes are [Node|Nodes] data such as the IP address, hostname, loaded kernel modules, version of programming languages available on the system and more. New attributes can be dynamically added to the node in a variety of ways.

During the [Chef run|Anatomy of a Chef Run], the [Chef Client] saves these node attributes on the [Chef Server] where they are indexed for [Search|Search]. When the [Chef Client] runs again, it will retrieve the attributes that were saved previously and merge in attributes based on the priority rules described below.{color}

h1. Attribute Type and Precedence

!attribute-priority-stack.png|align=right,hspace=8!

There are three types of attributes in order of precedence, highest to lowest.

* override
* normal
* default

*{color:#f7681a}Write your cookbooks with default attributes, but override these with role-specific or node-specific values as necessary.{color}*

A fourth attribute type, {{automatic}}, contains [Ohai|ohai] data and has the highest precedence. 

_*Chef doesn't provide any way to modify automatic attributes because any modifications you make will be overwritten with [Ohai|ohai] data again on the next run.*_  {color:#f7681a}Review *[Automatic Attributes]* for those reserved namespaces.{color}

Attributes are a special key-value store called a *Mash* within the Ruby DSL context.  A *Mash* is just a *Hash* where the key can be either a Ruby symbol (:key) or a string ("key"). The keys are also auto-vivified into accessor methods, which we'll talk about in a moment. 
{column} 
{column:width=2%}
{column}
{column:width=30%}
\\
\\
{panel:bgColor=#d7d4c3}  
{toc:minLevel=1|maxLevel=3|printable=no} 
{panel} 

\\
{warning:title=Attributes that Aren't}
A number of pieces of data related to a node are methods rather than attributes.  As such, they cannot be accessed using the syntax for attributes, but rather must be accessed as method.  Important node methods include:
{code}
node.name
node.run_list
node.chef_environment
{code}
{warning}
{column}
{column:width=5%}
{column}
{section} 
{section}
{column:width=3%}
{column}
{column}
h1. Attribute Persistence
{float:right|background=#f4f2e6|padding=2px|margin=8px|width=360px}
{center}
{info:title=0.10.x behavior}
The behavior described in this section refers to the behavior of Chef 0.10+.
{info}
{center}
{float}

{color:#f7681a}At the beginning of each {{chef-client}} run, {{default}}, {{override}}, and {{automatic}} attributes are completely reset.{color}  
They are then rebuilt using the currently applicable cookbooks, recipes, roles, environment and Ohai data.  
_Thus, default and override attributes set in cookbook attribute files, roles, recipes, or environments will disappear once the recipe, role, or environment is removed from the node and chef-client is run on the node._

{color:#f7681a}{{Normal}} attributes are not reset.{color}
Rather, on each chef-client run, any new attributes passed to chef-client in a JSON file are merged with the existing {{normal}} attributes in the node's data(using [Deep Merge]).  
_This means that any {{normal}} attribute set in a recipe or cookbook attribute file will remain even after the cookbook or role has been removed from the node's run list._

h1. Setting Attributes
Attributes may be set on the node from the following objects

* cookbooks
* environments _(Chef 0.10.0 or above only)_
* roles
* nodes

h3. Precedence
*{color:#f7681a}The precedence of the attributes is as follows, from low to high:{color}*

# {{default}} attributes applied in an attributes file
# {{default}} attributes applied in an environment
# {{default}} attributes applied in a role
# {{default}} attributes applied on a node directly in a recipe
# {{normal}} or {{set}} attributes applied in an attributes file
# {{normal}} or {{set}} attributes applied on a node directly in a recipe
# {{override}} attributes applied in an attributes file
# {{override}} attributes applied in a role
# {{override}} attributes applied in an environment
# {{override}} attributes applied on a node directly in a recipe

{{default}} attributes applied in an attributes file have the lowest priority and {{override}} attributes applied on a node directly in a recipe have the highest priority. 

Write your cookbooks with default attributes, but override these with role-specific or node-specific values as necessary.
{color:#f7681a}*See examples*{color} *[here...|Setting Attributes (Examples)]*

_Again, the exception to this are {{automatic}} attributes. They have the highest precedence and may not be modified, as they are regenerated by [Ohai|ohai] every time Chef runs._  

h3. Notation
Attributes are a special key-value store called a *Mash* within the Ruby DSL context.  A *Mash* is just a *Hash* where the key can be either a Ruby symbol (:key) or a string ("key").  {color:#f7681a}It's easier to stick with string notation if you are just starting out with Chef and/or Ruby.{color} This allows you to just "quote it", rather than also having to learn about special cases, name space overlap (and method_missing), character constraints, and escaping work at the beginning.   

That way, by the time you may want to use symbols stylistically or contextually, you can [learn to wield them|http://www.ruby-lang.org/en/] with an existing base of knowledge. Our examples and detail on attributes use a string notation for that reason. If you already know your way around symbols in ruby, you may of course use them.

{include:Attributes Cookbook|nopanel=true}

h2. Environment Attributes
{float:right|background=#f4f2e6|padding=2px|margin=8px|width=360px}
{center}
{tip:title=Chef 0.10.0 or above}
Environments attributes are only available in Chef 0.10.0 or above.
{tip}
{center}
{float}

{color:#f7681a}Environments can set {{default}} and {{override}} attributes.{color} 

This is done with the {{default_attributes}} and {{override_attributes}} methods (respectively) in an Environment's [Ruby DSL|Environments#TheRubyDSL] file, or the {{default_attributes}} and {{override_attributes}} hashes in the Environment's JSON data. It is common to assign attributes that pertain to a particular environment. For example, the external load balancer's public DNS may be different in "production" than in "staging".

h2. Role Attributes
{float:right|background=#eeeeee|border=4px solid #d7d4c3|padding=10px|margin=10px|width=340px}
{center}{color:navy}*You can have [deep merged|Deep Merge] Attributes*{color}{center}
{center}[Deep merging|Deep Merge] allows you to layer role attributes.{center}
{float}
{color:#f7681a}Roles can only set {{default}} and {{override}} attributes, they cannot set {{normal}} attributes.{color} This is done with the {{default_attributes}} and {{override_attributes}} methods in a Role's [Ruby DSL|Roles#TheRubyDSL] file, or the {{default_attributes}} and {{override_attributes}} hashes in the Role's JSON data. 

It is common to assign attributes that pertain to a particular role. For example, a {{php_apache2_server}} role might use different tuning parameters for the same apache attributes than a {{mod_perl_apache2_server}}.

h2. Node Attributes
{color:#f7681a}Finally, the node object can be modified directly to set the attributes.{color} Typically, this sets attributes at the {{normal}} priority level, and can be done by editing the node with knife or through the WebUI, or by passing JSON data to the node.

h3. JSON Attributes

You can also specify node attributes with a JSON file. These are applied at the {{normal}} priority level.

{code}
chef-client --help
[...]
    -j JSON_ATTRIBS                  Load attributes from a JSON file or URL
        --json-attributes
{code}

For example, to set up some different ports for Apache to listen on:

{code:javascript|linenos=false|title=JSON attribute example}
{ "apache": { "listen_ports": ["81", "8080"] } }
{code}

Remember, that attributes passed via JSON file are merged with those stored on node and actually there is no way to override them in that way, however if there is a conflict, attributes from JSON file will win with those stored on node.

h2. [Automatic Attributes]
This fourth attribute type cannot be modified, as any modifications you make will be overwritten with [Ohai|ohai] data again on the next run.

h1. How to Use Attributes

{tip:title=Good Candidates for Attributes}
* Cross-Platform abstractions for an application such as the path to a config file.
* Default values for "tunable" settings such as memory assigned to processes or number of workers to spawn.
* Anything else you may want to persist (in node data) between Chef runs.
{tip}

h3. Usage Best Practices

{color:#f7681a}The general pattern for attributes precedence is that cookbooks and roles should be setting defaults.{color} 
* If you need to change the values for a specific node, use, the normal attributes on the node. 
* Overrides are there so roles can force a certain value even if the node already has a value there. 

There are certainly other ways to use it, but that is the pattern it was designed for.

h3. Setting Attributes at the Same Precedence Level

{color:#f7681a}A common use case is to set default attributes in a cookbook's attribute files, and also set the same default attributes, but with different values, using a role.{color} In this scenario, the attributes set in the role will be [deep merged|Deep Merge] on top of the attributes from the attributes file. _The attributes set by the role will win if there is a conflict._

h3. Setting a Value Only If the Attribute Has No Value

In attribute files, you can also set a value only if no value is currently set for that attribute using the {{\_unless}} variants of the attribute priority methods: {{default_unless}}, {{set_unless}}, and {{override_unless}}. These can be handy in some use cases, but *be careful\!*

When you use these methods, _the attributes applied to your nodes will become out-of-sync with the values in your cookbooks_ whenever you update your cookbooks. This means that building a new node with an identical set of recipes and roles as an existing node could result in a different configuration--a problem that can be frustrating to debug. For this reason, you should avoid using the {{\_unless}} methods whenever possible.
\\
\\
\\
\\
\\
{column}
{column:width=5%}
{column}
{section}
{section}
----
{column:width=45%}

!leftarrow.png|align=left,hspace=4! 
[Chef Essentials]

{column}
{column:width=40%}
{column}

{column:width=15%}

!rightarrow.png|align=right,hspace=4! 
[Automatic Attributes]

\\
\\
{column}
{section}