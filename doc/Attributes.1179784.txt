{section}
{column:width=3%}
{column}
{column}

!attributes.jpg|align=left,vspace=40,hspace=18,thumbnail!

h1. 概要

h5. {color:#f7681a}属性は[ノード]の持つデータであり、IP アドレス・ホスト名・ロードされたカーネル・モジュールの一覧・そのシステムで利用可能な各プログラミング言語のバージョン等を含んでいます。さまざまなやり方で新しい属性を動的にノードへと追加することができます。

[Chef が実行|Chef 実行の解剖図]されている間に、属性は[Chef クライアント]によって[Chef サーバ]に保存され、[検索]のためにインデクスされます。[Chef クライアント]がもう一度実行されたときには、以前保存された属性をまた取り出して、下記に述べる優先順位にもとづき、現在の属性とマージします。{color}

h1. 属性の種別と優先度

!attribute-priority-stack.png|align=right,hspace=8!

優先度が高い順に 3 種類の属性があります。

* override
* normal
* default

*{color:#f7681a}クックブックでは default 属性を使い、必要になったらロールやノードのほうで値を指定し上書きします。{color}*

4 種類目として {{automatic}} という属性もありますが、これは [ohai] で収集したデータであり、優先度が一番高くなっています。

_*Chef には automatic な属性に変更を加える手段はありません。なぜなら、どんな変更を加えたとしても、次の Chef 実行時に [ohai] によって上書きされてしまうからです。*_ {color:#f7681a}予約済みの名前空間を知りたければ *[Automatic 属性]* を見てください。{color}

属性は、Ruby の DSL の中では *Mash* と呼ばれる特別なキーバリューストアとなっています。*Mash* はただの *Hash* なのですが、キーが Ruby のシンボル (:key) でも文字列 ("key") でも構わないという性質を持っています。キーは自動的にアクセサメソッドとしても追加されているのですが、これについてはすぐあとで触れます。
{column} 
{column:width=2%}
{column}
{column:width=30%}
\\
\\
{panel:bgColor=#d7d4c3}  
{toc:minLevel=1|maxLevel=3|printable=no} 
{panel} 

\\
{warning:title=属性ではないもの}
ノードに関連するいくつかのデータは、属性ではなくメソッドです。なので、属性に使われるような文法でアクセスすることはできず、メソッドとしてアクセスしなければなりません。ノードの持つ重要なメソッドの例：
{code}
node.name
node.run_list
node.chef_environment
{code}
{warning}
{column}
{column:width=5%}
{column}
{section} 
{section}
{column:width=3%}
{column}
{column}
h1. 属性がいつまで残るか
{float:right|background=#f4f2e6|padding=2px|margin=8px|width=360px}
{center}
{info:title=0.10.x の振る舞いです}
この節に書いてある振る舞いは Chef 0.10 以上のものです。
{info}
{center}
{float}

{color:#f7681a}{{chef-client}} の実行が行われる度に、まず {{default}} 属性, {{override}} 属性, {{automatic}} 属性が完全にリセットされます。{color}
それから属性は、現在適用できるクックブック／レシピ／ロール／環境／ohai のデータを利用して再構築されます。
_なので、クックブックの属性ファイル／ロール／レシピ／環境の中で設定された default 属性・override 属性は、ノードからそのレシピ／ロール／環境を削除してから chef-client を実行すると、消えてしまいます。_

{color:#f7681a}{{normal}} 属性はリセットされません。{color}
むしろ、chef-client が実行されるたびに、JSON ファイルで chef-client に渡さされたどんな属性も、ノードのデータに元から存在する {{normal}} 属性とマージされます ([ディープ・マージ]を使います)。
_つまり、レシピやクックブックの属性ファイルで設定された {{normal}} 属性はすべて、ノードの実行リストからそのクックブックやロールが削除されてしまったあとでも残り続けるということです。_

h1. 属性を設定する方法
属性をノードに対して設定できるのは下記のオブジェクトです

* クックブック
* 環境 _(Chef 0.10.0 以上のみ)_
* ロール
* ノード

h3. 優先順位
*{color:#f7681a}属性の優先順位は以下のようになっています。低い順から高い順です：{color}*

# 属性ファイルの中で適用される {{default}} 属性
# 環境の中で適用される {{default}} 属性
# ロールの中で適用される {{default}} 属性
# レシピの中で直接ノードに適用される {{default}} 属性
# 属性ファイルの中で適用される {{normal}} または {{set}} 属性
# レシピの中で直接ノードに適用される {{normal}} または {{set}} 属性
# 属性ファイルの中で適用される {{override}} 属性
# ロールの中で適用される {{override}} 属性
# 環境の中で適用される {{override}} 属性
# レシピの中で直接ノードに適用される {{override}} 属性

属性ファイルの中で適用される {{default}} 属性の優先度が一番低く、レシピの中で直接ノードに適用される {{override}} 属性の優先度が一番高いのです。

クックブックにはデフォルトの属性を定義し、必要に応じてロールに特有な値やノードに特有な値で上書きしましょう。
{color:#f7681a}*例は*{color} *[ここ|属性の設定例]* に載っています。

_ここでも、{{automatic}} 属性は例外です。一番優先度が高く変更することはできません。Chef が実行される度に [Ohai] によって再作成されるからです。_

h3. 記法
属性は、Ruby の DSL の中では *Mash* と呼ばれる特別なキーバリューストアとなっています。*Mash* はただの *Hash* なのですが、キーが Ruby のシンボル (:key) でも文字列 ("key") でも構わないという性質を持っています。
{color:#f7681a}Chef／Ruby の初心者ならばすべてに文字列を使うようにしたほうが簡単でしょう。{color} そうすれば、ただクオートで囲めばよいだけなので、名前空間の衝突 (や method_missing) や使ってよい文字の制限などの特別なケースを学習しなくてよいし、文字列なら最初からエスケープが効きます。

そうすることにしておき、スタイル・文脈に応じてシンボルを使いたくなったら、そのときまでに分かった知識を生かして[シンボルの使い方を学べば|http://www.ruby-lang.org/en/]よいのです。コード例や属性の説明で、文字列の記法を使っているのはこのような理由からです。Ruby でどのようにシンボルを使えばよいか知っているなら、もちろん使っても大丈夫です。

{include:Attributes Cookbook|nopanel=true}

h2. 環境の属性
{float:right|background=#f4f2e6|padding=2px|margin=8px|width=360px}
{center}
{tip:title=Chef 0.10.0 以上の話です}
環境の属性は Chef 0.10.0 以上でしか利用できません。
{tip}
{center}
{float}

{color:#f7681a}環境は {{default}} 属性と {{override}} 属性を設定することができます。{color} 

実際に設定するときには、環境の [Ruby DSL|Environments#TheRubyDSL] 内でそれぞれ {{default_attributes}} メソッド・ {{override_attributes}} メソッドを使うか、環境の JSON データの中で {{default_attributes}} ・ {{override_attributes}} ハッシュを定義します。ある環境に特有の値を割り当てるのが一般的です。たとえば、"production" と "staging" では外部ロードバランサのパブリックなドメイン名が異なるでしょう。

h2. ロールの属性
{float:right|background=#eeeeee|border=4px solid #d7d4c3|padding=10px|margin=10px|width=340px}
{center}{color:navy}*属性を[ディープ・マージ]することができます。*{color}{center}
{center}[ディープ・マージ]によってロールの属性を階層化することができます。{center}
{float}
{color:#f7681a}ロールで設定できるのは {{default}} 属性・ {{override}} 属性のみで、{{normal}} 属性を設定することはできません。{color} This is done with the {{default_attributes}} and {{override_attributes}} methods in a Role's [Ruby DSL|Roles#TheRubyDSL] file, or the {{default_attributes}} and {{override_attributes}} hashes in the Role's JSON data. 
実際に設定するときには、ロールの [Ruby DSL|Environments#TheRubyDSL] 内で {{default_attributes}} メソッド・ {{override_attributes}} メソッドを使うか、ロールの JSON データの中で {{default_attributes}} ・ {{override_attributes}} ハッシュを定義します。

あるロールに特有の値を割り当てるのが一般的です。たとえば、{{php_apache2_server}} というロールと {{mod_perl_apache2_server}} というロールでは、同じ Apache の属性に対して違うチューニングパラメタを使いたくなるでしょう。

h2. ノードの属性
{color:#f7681a}最後に、ノードオブジェクトを直接変更して属性を設定することができます。{color} 典型的には 優先度 {{normal}} で属性を設定します。ノードの属性を設定するには、knife や WebUI でノードを編集する方法と、ノードに JSON データを渡してやる方法があります。

h3. JSON 属性

ノードの属性を JSON ファイルで指定することもできます。優先度は {{normal}} が適用されます。

{code}
chef-client --help
[...]
    -j JSON_ATTRIBS                  Load attributes from a JSON file or URL
        --json-attributes
{code}

たとえば、Apache が listen するポート番号をいくつか指定するには下記のように書きます：

{code:javascript|linenos=false|title=JSON attribute example}
{ "apache": { "listen_ports": ["81", "8080"] } }
{code}

忘れてならないのは、JSON ファイルで渡された属性はノードに保存された属性とマージされるため、上書きする方法がないということです。しかしながら、もし属性のキーに衝突があったら、JSON ファイルの属性がノードに保存された属性よりも優先されます。

h2. [Automatic 属性]
この 4 種類目の属性を変更することはできません。なぜなら、どんな変更を加えたとしても次の実行で [Ohai] のデータによって上書きされてしまうからです。

h1. 属性の使い方

{tip:title=属性を使うとよい場面}
* 設定ファイルへのパスなどのアプリケーションの設定を、プラットフォームを意識しなくてよいレベルで記述したいとき
* プロセスに割り当てられるメモリ量や spawn するワーカーの数など、「設定可能な」項目のデフォルト値を設定したとき
* その他、Chef の起動が終わっても (ノードデータ内に) 残っていてほしい値があるときならいつでも
{tip}

h3. 属性を使う上でのベストプラクティス

{color:#f7681a}属性の優先順位をうまく使うためによく用いられるパターンは、「クックブックとロールでデフォルト値を設定すべき」というものです。{color} 
* もし、あるノードの値を変更する必要があるなら、ノードに normal 属性を適用します。
* override 属性というのは、既にノードに設定されている値をロールから強制的に上書きするために使います。

他にもいろいろな使い方がありますが、私たちが属性を設計する際に想定していたのは上記のパターンです。

h3. 同じ優先度で属性を設定する

{color:#f7681a}一般的なユースケースとして、クックブックの属性ファイルの中で default 属性を設定しておき、ロールでも同じ default 属性に対して異なる値を設定することがあります。{color} このような場合、ロールで設定された属性は、属性ファイルに書かれた属性に基づき[ディープ・マージ]されます。_衝突があった場合、ロールで設定された属性が優先されます。_

h3. 属性に値が設定されていなかった場合にだけ値を設定する

属性ファイルでは、「現在その値が設定されていなかった場合にだけ値を設定する」ということもできます。これを行うには、属性優先度指定メソッドの変化形である {{_unless}} メソッドが利用できます：{{default_unless}}, {{set_unless}}, {{override_unless}} の 3 つです。これを使うと便利な場面もあるにはありますが、 *注意してください！*

このようなメソッドを使うと、クックブックを更新したときに _実際にノードに適用される属性と、クックブックの中に書いてある値の間で同期が取れなくなってしまいます。_ これが意味しているのは、同じレシピ・ロールを使って新しいノードを作ったときに、既存のノードとは異なる設定が適用されてしまうということですーーデバッグしづらくイライラする問題が起こってしまうのです。そういう訳で、{{\_unless}} メソッドは可能なかぎり使わないほうがよいでしょう。
\\
\\
\\
\\
\\
{column}
{column:width=5%}
{column}
{section}
{section}
----
{column:width=45%}

!leftarrow.png|align=left,hspace=4! 
[必要不可欠な要素]

{column}
{column:width=40%}
{column}

{column:width=15%}

!rightarrow.png|align=right,hspace=4! 
[Automatic 属性]

\\
\\
{column}
{section}
