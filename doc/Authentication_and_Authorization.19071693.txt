{section}
{column:width=3%}
{column}
{column}
{float:right|background=#d7d4c3|padding=4px|margin=18px|width=320px}
{panel:bgColor=#d7d4c3} 
{toc:minLevel=1|maxLevel=2|printable=no} 
{panel}
{float}
!authentication.png|align=left,thumbnail,hspace=20,vspace=26!
h1. 概要

h4. {color:#f7681a}Chef-client と knife は両方とも [REST API|Server API] を使って Chef サーバと通信します。{color}
   
h5. [Chef-clients|Chef Client] は API リクエストを行い、実行リストを取得したり、クックブックをダウンロードしたり、処理がうまく完了したときに自分の状態を保存したりします。

h5. クックブックを開発したりインフラを管理するときには、普通は [Knife] コマンドを使うことになるでしょう。Knife は [Chef サーバ]に API リクエストを送ります。
\\
\\

{panel:borderColor=#f7681a|borderWidth=2}
{center}
h3. {color:navy}サーバによって処理される前に、各リクエストは 2 つのプロセスを通過します{color}
{center}

| h5. {color:#f7681a}認証：{color} Chef サーバと通信している API クライアントの ID が正しいものか検証します。 | h5. {color:#f7681a}権限管理：{color}  ID が検証できたクライアントがリクエストされたアクションを実行する権限があるかどうか検証します。 |
{center}!authz-and-authn-overview.png|align=center!{center}
\\
{panel}

ノードやワークステーションの初期設定をしてしまえば、このようなプロセスはだいたい意識しなくてもよいものです。しかしながら、この 2 つのプロセスを理解しておくことは、どんな問題が潜んでいるのかデバッグするときに重要となります。

{color:#f7681a}*[Chef-Solo|Chef Solo]* は Chef サーバと通信しないので、chef-solo を普通に使う分には認証と権限管理は行われません。{color} この記事では、API クライアントのリクエストがどのように認証され権限管理されるのかを扱います。特定のエラーについての情報を知りたければ[よくあるエラーの一覧]を見てください。

h1. 認証
{float:left|background=#eeeeee|border=4px solid #d7d4c3|padding=4px|margin=10px|width=180px}
{center}
{color:navy}*認証によって Chef サーバが受け取ったリクエストが既知の API クライアントから送られたものか確かめます*{color}
{center} 
{float}
{color:#f7681a}Chef の認証プロセスでは公開鍵暗号を使いますが、これは Open Source 版 Chef サーバでも Chef ホスティング・プライベート Chef でも同じです。{color}

API クライアントが作成されるとき、暗号化された秘密鍵と公開鍵が作成されます。公開鍵は Chef サーバに保存され、秘密鍵はユーザに返却され安全に保存することが求められます。秘密鍵は ".pem" ファイルであり、ローカルの {{.chef}} ディレクトリか {{/etc/chef}} に置くものです。{{chef-client}} や {{knife}} といった Chef の実行ファイルは、Chef サーバにリクエストを認証してもらうために、特別に作られた HTTP ヘッダを秘密鍵で暗号化します。Chef サーバは公開鍵を利用してこのヘッダを復号し、内容を検証します。

このプロセスのおかげで、既知の API クライアントからのリクエストのみ受け入れることができます。

どのように API リクエストが認証されるかについて技術的な詳細が知りたければ、[認証可能な API リクエストを行う方法]を見てください。よくある問題で認証エラーにつながるようなものをデバッグしたいのなら、[よくあるエラーの一覧]をご覧ください。

h2. 最初の Chef-client 実行

!authn-flow.png|align=right!
{color:#f7681a}chef-client から Chef サーバへのすべてのリクエストは認証されなければならないので、すべてのノードは API クライアントを持っていなければなりません。{color} 管理者がノードをインフラに追加したいと思うたびに新しく API クライアントを作る必要がないように、Chef は chef-client を最初に実行するときに特別な *validator クライアント* を利用します。

validator クライアントのキーペアは、最初に Chef サーバをインストールしたとき、または Chef ホスティングで組織を作ったときに作成され、[Knife によるブートストラップ] を行う場合にはクライアントにコピーされるし、自分で chef-client をインストールする場合には手動でコピーします。 _この validator クライアントが新しい API クライアントを作成し、ノードはそこで作成された API クライアントを使い、それ以降のリクエストを行うことができるのです。_

クライアント用の鍵がノードに存在しているかどうかのチェックが行われます ({{/etc/chef/client.pem}} が典型的な置き場所です)
* もし存在していれば、リクエストへの署名を開始します。

* もし存在していなければ、validation キーがノードに存在しているかチェックします ({{/etc/chef/validation.pem}} が典型的な置き場所です)。
** もし存在していれば、validation キーでリクエストに署名し、新しい API クライアントのキーをリクエストします。
** もし存在していなければ、失敗となります。

新しい API クライアントのキーが発行されたら、以降のリクエストではそのキーを利用して署名を行うようになります。

h2. 認証の問題をデバッグする

{color:#f7681a}認証の問題が起きているときには、chef-client がリクエストを行うと HTTP ステータス 401 を受け取ります。{color}  HTTP ステータス 403 を受け取っているのなら、*権限管理* に問題があります。

認証エラーは下記のような見た目になるでしょう：
{code}
[Wed, 05 Oct 2011 15:43:34 -0700] INFO: HTTP Request Returned 401 Unauthorized: Failed to authenticate as NODENAME. Ensure that your node_name and client key are correct.
{code}
認証の問題をデバッグするとき、最初に突き止めるべき情報は、chef-client が認証させようとしている API クライアントがどれかということです。これは chef-client の出力するログメッセージを見ればわかります。たとえばでバッグログを有効にすれば ({{chef-client -l debug}})、下記のような行を見ることができるでしょう：

{code}
[Wed, 05 Oct 2011 22:05:35 +0000] DEBUG: Signing the request as SOMENODENAMEHERE
{code}

*もし認証が validator クライアントで行われているのなら、問題はおそらく validation キーにありそうです。*  

*もし認証がノードの API クライアントで行われているのなら、いくつかよくある原因が考えられます。*

* client.pem が間違っている。
    これを解決するには、client.pem を削除し chef-client を再実行します。chef-client が実行されると、API クライアントが登録され正しいキーが生成されます。

* 最初の chef-client 実行で使ったのと違うノード名で認証しようとしている。
    これが起こるのにはたくさんの理由が考えられるでしょう。たとえば、client.rb にノード名が指定しないまま、最近システムの hostname を変更したとか。解決するには、最初の登録時に使った名前と一致するように、明示的に client.rb ファイルか chef-client の -N オプションでノード名を設定します。または、上述の方法を使って再登録を行うこともできます。

* システムの時刻が実際の時刻より遅れており、その差が 15 分より多い。これを解決するには、NTP サーバで時刻を同期させます。


h2. ウェブ UI

{color:#f7681a}ウェブ UI も Chef サーバの REST API を利用してほとんどの操作を行っています。{color}  そのような API からのリクエストもまた認証されます。ウェブ UI はインストール時に生成されたキーペアを利用して認証を行います。Chef ホスティングのユーザはウェブ UI 用認証キーの管理を心配する必要はありません。Opscode がすべてやってくれます。プライベート Chef を使う場合には、プライベート Chef サーバ を担当する内部の管理者が認証キーを管理することになります。

h1. 権限管理
{float:left|background=#eeeeee|border=4px solid #d7d4c3|padding=6px|margin=10px|width=180px}
{center}
{color:navy}*権限管理により、あるリクエストを行っている API クライアントがリクエストしているアクションを実行する許可を持っているか確認することができます*{color}
{center} 
{float}
オープンソース版 Chef の権限管理はクライアント毎に設定するモデルであり、Chef ホスティングやプライベート Chef のロールベースの権限管理 (role-based access control, RBAC) モデルとはかなり違います。

_*[Chef ホスティングの権限管理]* を見れば、Chef ホスティングとプライベート Chef の権限管理モデルが分かります。_

{color:#f7681a}オープンソース版 Chef サーバにおける権限管理を行うには、API クライアントのそれぞれを non-admin, admin, validator のどれかに任命します。{color}  
ある機能についてはすべてのクライアントから利用可能ですが、別の機能は admin または validator クライアントにのみ利用可能であり、いくつかの機能については admin クライアントにのみ利用可能です。さらに、API クライアントは特定のアクションについて、自分自身または自分に関連するノードに対して実行することができますが、それ以外の他のクライアントには実行できません。

admin クライアントはクライアントの {{admin}} 属性を true に設定することで作ることができます。
この属性は {{knife client create}} でクライアントを作成するときか、{{knife client edit}} を利用することで設定できます。

validator クライアントは Chef サーバをインストールするときに作成されます。

{color:#f7681a}*admin クライアントのみ*{color}
下記の API リクエストは admin クライアントだけが行えます。

||リクエストの説明||該当する knife コマンド||
||クライアント一覧||{{knife client list}}|
|||クライアント更新|{{knife client edit NAME}}|
||クライアント削除|{{knife client delete NAME}}|
||クックブック更新|{{knife cookbook upload COOKBOOK}}|
||クックブック削除| {{knife cookbook delete COOKBOOK}}|
||データバッグ作成| {{knife data bag create BAG_NAME}}|
||データバッグ削除|{{knife data bag delete BAG_NAME}}|
|||データバッグ項目作成|{{knife data bag create BAG_NAME ITEM_NAME}}|
||データバッグ項目更新|{{knife data bag edit BAG_NAME ITEM_NAME}}|
||データバッグ項目削除|{{knife data bag delete BAG_NAME ITEM_NAME}}|
|||環境作成|{{knife environment create ENV_NAME}}|
||環境更新|{{knife environment edit ENV_NAME}}|
||環境削除|{{knife environment delete ENV_NAME}}|
||ロール作成|{{knife role create ROLE_NAME}}|
||ロール更新|{{knife role edit ROLE_NAME}}|
||ロール削除|{{knife role delete ROLE_NAME}}|
||検索インデクス再作成|*NA*|
||ユーザ作成|*NA*|
||ユーザ更新|*NA*|
||ユーザ削除|*NA*|

{color:#f7681a}*admin または validator クライアント*{color}
下記の API リクエストは admin または validator クライアントだけが行えます。

||リクエストの説明||該当する knife コマンド||
||クライアント作成|{{knife client create}}|

_admin クライアントだけが他の admin クライアントを作成することができることに注意してください。_

{color:#f7681a}*admin クライアントまたはすべてのクライアントが自分自身に対してのみ行える*{color}
下記の API リクエストは admin または自分自身または自分に関連するノードに対するアクションをリクエストしているクライアントのみが行えます。

||リクエストの説明||該当する knife コマンド||
||クライアント表示|{{knife client show NAME}}|
||ノード更新|{{knife node edit NAME}}|
||ノード削除|{{knife node delete NAME}}|
||ノードのクックブック一覧|*NA*|

*上記テーブルの一覧に含まれるすべての機能は、適切な認証リクエストを行ったすべての API クライアントによって実行可能です。*

h1. まとめ
*{color:#f7681a}オープンソース版 Chef サーバはクライアント毎に権限設定できるモデルを採用している。{color}*
# 保存されているすべてのオブジェクト (ロール、ノード、クックブック、データバッグ、検索インデクス) は同じ仮想空間に存在し、すべての API クライアントからアクセス可能である。
# すべての API クライアントは "admin" か "normal" のどちらかとして認証される。
** "admin" API クライアントはすべてのノードに対して作成・閲覧・更新・削除が行ったりといった、特権的なタスクを実行できる。
** "normal" API クライアントは自分が作成したノードに対して操作を行うことができる。

*{color:#f7681a}Chef ホスティングとプライベート Chef の持つロールベースの権限管理 (RBAC) モデルについては *[Chef ホスティングの権限管理]* に詳しく書かれています。{color}*
\\
\\
\\
\\
\\
{column}
{column:width=5%}
{column}
{section}
{section}
----
{column:width=45%}

!leftarrow.png|align=left,hspace=4! 
[アーキテクチャ]

{column}
{column:width=40%}
{column}

{column:width=15%}

!rightarrow.png|align=right,hspace=4! 
[Chef ホスティングの権限管理]

\\
\\
{column}
{section}
