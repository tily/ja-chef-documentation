{section}
{column:width=3%}
{column}
{column}

!OC_Chef_Logo_small.png|align=left,hspace=30,vspace=8!

h3. {color:#f7681a}Chef は「べき等」{color}

Chef のレシピを何度同じシステムに対して実行したとしても、処理が終わったあとのシステムはいつでもまったく同じ状態になります。Chef では、レシピの中にリソースが定義されており、リソースの中にはシステムに対して実行されるアクションが記述されています。Chef が保証してくれるので、リソースに変更がなければアクションは実行されません。あるシステムに対して 1 度実行した Chef のレシピをもう 1 度実行したとして、システムにもレシピにも変更がなかったとしたら、Chef がシステムを変更することはありません。

h3. {color:#f7681a}重量クライアント、軽量サーバ{color}

Chef はクライアント側でできるだけのことをします。Chef サーバの目的はデータを簡単にクライアントに配布することですーーどんなレシピを適用すべきか、どんなテンプレートを使うべきか、どんなファイルを送信すべきかーーあとは各ノードの状態を保存したりもします。このような性質のおかげで、スケールしやすく拡張しやすいシステムを作ることができますーーどのようにインフラを構成すべきか決定すれば、それがインフラにあまねく配布されるし、複数台の構成管理サーバが集中管理しているということはありません。

h3. {color:#f7681a}順番に意味がある{color}

!bikerack-color.jpg|align=right,hspace=12,vspace=8!

構成管理では、順番に意味があります。Apache をインストールしていなかったら、Apache を設定することはできないですよね。当たり前ですがデーモンを起動することもできないはずです。構成管理ツール界隈は長年のあいだ、この問題に取り組んできました。Chef のノードにはレシピのリストが適用され、さらにレシピはリソースを指定します。レシピの中で、リソースは出現した順に適用されます。レシピではどの時点においても他のレシピをインクルードすることができるし、一度インクルードされたらそのレシピに指定されたリソースが適用されないうちには元のレシピは実行されません (Chef は賢いので同じレシピを 2 度適用するというようなことも決してしません)。依存性はレシピのレベルで行い、リソースのレベルでは行いません。つまり、抽象度の高いレベルでだけ依存性を解決すればよいというわけですーー「Apache をインストールしてから、Django アプリを開始させたい」とか。また、同じクックブック集があれば、Chef はいつでも同じ順番にリソース適用を実行してくれる、ということも書いておきましょう。

h3. {color:#f7681a}分かりやすい{color}

Chef は考えやすく、変更しやすく、拡張しやすいように設計されています。Chef では「インフラがどんな風に構成されるべきか一番よく知っているのはあなた」が前提です。なので、Chef はなるべくあなたに決断をまかせるし、Chef が自ら決断したとしても簡単に心変わりさせることができます。Chef が決断を下すときには分かりやすいデフォルトを設定してくれるし、それをあとから変更することも簡単なのです。さらに、Chef は現実主義で口うるさいことは言わず、セオリーや教義っぽいものよりも決定論的な結果に根ざしています。そういうわけで Chef は Ruby を基準言語とし、リソースの要件に合わせて DSL で拡張しているのです。Chef はインフラを自動化するためにベースとなる構成要素 (つまりはリソース) を分かりやすいセットとして提供しています。しかしながら、(Ruby で) 簡単にベースを修正し拡張することも可能です。というのも、[やりかたは 1 つではない|http://en.wikipedia.org/wiki/There's_more_than_one_way_to_do_it]からです。

\\
\\
\\
{column}
{column:width=5%}
{column}
{section}
{section}
----
{column:width=45%}

!leftarrow.png|align=left,hspace=4! 
[Chef とは何か]

{column}
{column:width=40%}
{column}

{column:width=15%}

!rightarrow.png|align=right,hspace=4! 
[どうして Chef を使うべきか]

\\
\\
{column}
{section}
