{section}
{column:width=3%}
{column}
{column}
\\



----
!Steven-Nathan-Noah-Dan.jpg|align=right,hspace=18,vspace=6!
!5631502-3d-image-of-a-synapses.jpg|align=left,vspace=10,hspace=6!
{center}
h3. {color:#f7681a}必要不可欠な部品を理解して使えば、Chef が持つパワーの恩恵を受けることができるはずです。{color}
{center}
\\
----

\\
\\
\\
{table}
{tr}
{td}
&nbsp;
{td}
{tr}
{tr}
{td}
h4. [属性] 
{td}
{td}
ノードの持つデータであり、IP アドレス・ホスト名・ロードされたカーネル・モジュールの一覧・そのシステムで利用可能な各プログラミング言語のバージョン等を含んでいます。
{td}
{tr}
{tr}
{td}
----
{td}
{tr}
{tr}
{td}
h4. [クックブック] 
{td}
{td}
Chef で配布の基本となる単位です。インフラ自動化に必要なリソースをすべてカプセル化してくれ、他の Chef ユーザとも簡単に共有することができます。
{td}
{tr}
{tr}
{td}
----
{td}
{tr}
{tr}
{td}
h4. [定義] 
{td}
{td}
定義を使えば、既存のリソース同士を結びつけることで新しいリソースを作成することができます。
{td}
{tr}
{tr}
{td}
----
{td}
{tr}
{tr}
{td}
h4. [ライブラリ] 
{td}
{td}
ライブラリの中に Ruby のコードを書き、Chef の DSL を拡張したり直接自分のクラスを実装したりすることができます。秘伝のタレのようなもので、既存のインフラ向けにプラグインを書いて Chef にシステムの設定方法を教えてやることができます。
{td}
{tr}
{tr}
{td}
----
{td}
{tr}
{tr}
{td}
h4. [メタデータ] 
{td}
{td}
クックブックにはほんの少しだけメタデータが必要となります。Chef サーバはこの情報をヒントにして、あるノードにどのクックブックを適用するべきかを知ります。自動的にクックブックを見つけインストールしてくれるシステムを作ろうとしているのなら、必要不可欠なものとなるでしょう。
{td}
{tr}
{tr}
{td}
----
{td}
{tr}
{tr}
{td}
h4. [レシピ] 
{td}
{td}
Chef における基本の設定です。レシピはリソースの集まりをカプセル化します。Chef はレシピで定義された順にリソースを実行し、[ノード]を設定します。
{td}
{tr}
{tr}
{td}
----
{td}
{tr}
{tr}
{td}
h4. [テンプレート]
{td}
{td} 
マークアップ言語のテンプレートをファイルに書き、変数やもっと複雑なロジックに基づいて動的に完成版のファイルを生成できます。一般的に、Chef で設定ファイルを管理する際にはテンプレートを使います。
{td}
{tr}
{tr}
{td}
----
{td}
{tr}
{tr}
{td}
h4. [Chef レポジトリ] 
{td}
{td}
Chef でシステムを管理するために必要な、クックブック・ロール・設定ファイルその他の作成物が息づく場所です。
{td}
{tr}
{tr}
{td}
----
{td}
{tr}
{tr}
{td}
h4. [データバッグ] 
{td}
{td}
どこからでも使える JSON データを好きなように保存する場所を提供します。
{td}
{tr}
{tr}
{td}
----
{td}
{tr}
{tr}
{td}
h4.  [環境] 
{td}
{td} 
1 つの Chef システム (または Chef ホスティングなら 1 つの組織) の中で、本番・ステージング・開発・テストといったさまざまな環境を管理するためのメカニズムです。
{td}
{tr}
{tr}
{td}
----
{td}
{tr}
{tr}
{td}
h4. [例外・レポートハンドラ]  
{td}
{td}
Chef の実行が成功したり失敗したりしたときに応じてコードを実行することができる Chef の機能です。
{td}
{tr}
{tr}
{td}
----
{td}
{tr}
{tr}
{td}
h4. [軽量リソース／プロバイダ(LWRP)]  
{td}
{td}
手っ取り早くて簡単に実装できるリソース／プロバイダです。元々の重量級のリソース／プロバイダとは異なり、Ruby の知識があまり無くても実装できます。
{td}
{tr}
{tr}
{td}
----
{td}
{tr}
{tr}
{td}
h4.  [ノード]  
{td}
{td}
Chef クライアントを実行するホストのことです。Chef サーバから見ると、ノードの主に[属性]・実行リストとして機能します。ノードには[レシピ]と[ロール]が適用されます。
{td}
{tr}
{tr}
{td}
----
{td}
{tr}
{tr}
{td}
h4.  [プロバイダ] 
{td}
{td}
リソースが管理しようとしている箇所をサーバの現状と比較し、リソースに指定されたアクションを実行します。プロバイダのおかげで Chef は 1 つのリソースがあればマルチプラットフォームで動作することができます。
{td}
{tr}
{tr}
{td}
----
{td}
{tr}
{tr}
{td}
h4.  [リソース]  
{td}
{td}
そのホストに対する設定内容を、プラットフォームを意識しなくてよいレベルまで抽象化してくれます。たとえば、パッケージというものは apt や yum、 BSD ports/packages 等のパッケージ・システムを通してインストールしますが、パッケージというリソースは各システム間の違いを抽象化してくれるので、「あるパッケージがインストールされているべき」というのがプラットフォームを意識せずに指定することができます。Chef のリソースはだいたいは単なるデータの入れ物であり、いくつか基本的なバリデーションの機能を持っています。
{td}
{tr}
{tr}
{td}
----
{td}
{tr}
{tr}
{td}
h4.   [ロール] 
{td}
{td} 
[ロール]を使えば、たくさんあるノードの中から機能の似ているものをグループとしてまとめることができます。簡単に機能ごとのグループを作ることができるメカニズムです。ウェブをスケールさせる際には、「1 つしかない」ということはほとんどあり得ないので、ロールを使ってグループ内で共有されるべき設定項目を表現します。
{td}
{tr}
{tr}
{td}
----
{td}
{tr}
{tr}
{td}
h4. [検索] 
{td}
{td}
Chef サーバの機能であり、(Apache Solr ベースの) 検索エンジンを利用してインフラやアプリケーションに関する情報を問い合わせることができます。検索機能は Chef サーバ上に構築されており、インフラに関するデータを好きなように問い合わせることができます。
{td}
{tr}
{tr}
{td}
----
{td}
{tr}
{table}

\\
\\
\\
\\
{column}
{column:width=5%}
{column}
{section}
{section}
----
{column:width=45%}

!leftarrow.png|align=left,hspace=4! 
[UML で見る Chef の概念図]

{column}
{column:width=40%}
{column}

{column:width=15%}

!rightarrow.png|align=right,hspace=4! 
[属性]

\\
\\
{column}
{section}
