{section}
{column:width=3%}
{column}
{column:width=60%}
\\
{panel:bgColor=#d7d4c3}
!OC_Chef_Logo_small.png|align=left,hspace=40,vspace=8!

\\
h4. {color:#f7681a}Chef サーバでは、[クックブック]の配布したり[ノード]の管理と認証を行ったり[検索]の利用したりといった機能が 1 カ所に集約されています。

Chef サーバは 2 つのレイヤーで機能を提供します。[REST API|サーバ API]と人間が読めるウェブインタフェース ([オープンソース版 Chef サーバの管理コンソール|Open Source Chef Server Management Console]) です。{color}
\\
{panel}
h1. 構成要素

Chef サーバは [Merb|http://www.merbivore.com] 製のウェブ・アプリケーションですが、追加でいくつかの構成要素も持っています。

* API サービス
* 管理コンソール (オプション)
* AMQP サーバ
* [検索インデクサ|Chef インデクサ]と検索エンジン
* CouchDB によるデータストア

h2. API サービス

||サービス名|chef-server|
||パッケージ／Gem|chef-server,chef-server-api|
||デフォルトのポート|4000|

{color:#f7681a}Chef の API サービスは、クライアントがサーバとやり取りし、ノードの設定情報を管理するために利用されます。{color} デフォルトでは、[thin|http://code.macournoyer.com/thin/] のサーバ・アダプタが適用された Merb アプリケーションとして 4000 ポートで立ち上がっています。

人間が API を使って Chef サーバとやりとりするには 2 つやり方があり、コマンドラインツール [Knife] か、[オープンソース版 Chef サーバの管理コンソール]を使います。クライアントとなるノードは、[Chef クライアント]用ライブラリを使って API とやりとりします。

{column} 
{column:width=20%}
\\
{panel:bgColor=#d7d4c3} 
{toc:minLevel=1|maxLevel=2|printable=no} 
{panel} 
\\
{info:title=Chef によるスケール可能なインフラの構築}
\\
[Cycle Computing|http://cyclecomputing.com/] にいる私たちの友人は、CentOS 5.5 の Chef サーバで、数 100 台ものサーバを構成管理し、インフラのスケールを自動化しています。彼らの[ブログ記事|http://blog.cyclecomputing.com/2011/05/why-baking-your-cluster-ami-limits-the-menu-devops-for-large-hpc-clusters.html]を見ればどうやっているか知ることができます。
{info} 
{column}
{column:width=7%}
{column}
{section} 
{section}
{column:width=2%}
{column}
{column:width=60%}

h2. オープンソース版 Chef の管理コンソール

||サービス名|chef-server-webui|
||パッケージ／gem|chef-server-webui|
||デフォルトのポート|4040|

{color:#f7681a}オープンソース版 Chef の管理コンソールは、オプションとして利用できる要素であり、人間が Chef サーバとうまくやりとりできる方法を提供しています。{color} デフォルトでは thin を使った Merb アプリケーションが 4040 ポートで立ち上がっています。管理コンソールにはユーザという概念があり、人間としてログインしパスワードによる認証を行うことができます。オープンソース版管理コンソールのユーザには OpenID の認証を紐づけることもできます。

管理コンソール自体が API [クライアント|#クライアント]であり、秘密鍵は {{/etc/chef/webui.pem}} にあり、デフォルトの名前は {{chef-webui}} です。管理コンソール内にはユーザがおり、デフォルトでは {{admin}} という名前でパスワードは {{p@ssw0rd1}} です。[RubyGems ブートストラップ用クックブック|LEG:Bootstrap Chef RubyGems Installation] を利用する際には、Chef がパスワードをランダムに生成しますが、JSON の属性で指定することもできます。

[オープンソース版 Chef サーバの管理コーンソール] に詳しい使い方が書いてあります。Chef ホスティングのお客さまなら [Chef ホスティングの管理コンソール] をご参照ください。プライベートな Chef のお客さまには管理ドキュメントを別途お届けしています。

h2. AMQP サーバ

||サービス名|rabbitmq-server|
||パッケージ|rabbitmq-server*|
||デフォルトのポート|5672,4369,50229|

*rabbitmq-server のパッケージ名はディストリビューションによって異なります。

{color:#f7681a}Chef サーバは AMQP サーバとして RabbitMQ を起動します。{color} SOLR にインデクスされるべきデータが CouchDB に保存されたら必ず、サーバはキューに対して追加すべきデータをメッセージ送信します。今度はインデクサがそのデータを処理する番です。

h2. 検索インデクサ

||サービス名|chef-solr-indexer|chef-solr|
||パッケージ／gem|chef-solr|chef-solr|
||デフォルトのポート|-|8983|

検索インデクサ {{chef-solr-indexer}} は AMQP を待ち受け、インデクスすべきものをメッセージで教えてもらったら、インデクスを行って結果を {{chef-solr}} に渡します。詳しくは[Chef インデクサ]か[検索]を参照してください。

h2. データストア

||サービス名|couchdb|
||パッケージ|couchdb|
||デフォルトのポート|5984|

{color:#f7681a}Chef サーバは [CouchDB|http://couchdb.apache.org] を利用し、[ノード]・[ロール]・[データバッグ]に関する JSON データを保存します。{color}CouchDB のバージョンは 0.9.1 以上である必要があり、それ以下には API の互換性がありません。CouchDB について詳しく知りたければ [CouchDB プロジェクトのページ|http://couchdb.apache.org] を参照してください。

{tip:title=CouchDB の管理方法}
[Chef サーバ向け CouchDB 管理方法]
{tip}

h1. 保存される情報

Chef サーバには、インフラ内で設定適用すべきオブジェクトについての、いくつかの情報が保存されてあります。

h2. API クライアント

{color:#f7681a}[クライアント|API クライアント]は API へのアクセスを行う実体です。{color} JSON オブジェクトとして CouchDB に保存され、インデクスされるので検索可能です。それぞれのクライアントはサーバに公開鍵・秘密鍵を保存してあり、秘密鍵のほうがクライアントへとコピーされます。API へアクセスするクライアントには 2 種類あります。

* 人間のクライアント
* 人間ではないクライアント

人間の場合には、[Knife] や[管理コンソール]でやりとりを行います。管理コンソールには利用ユーザもいますが、管理コンソール自体が「人間ではない API クライアント」であり chef-webui という名前を持っています。人間でないクライアントというのは、{{chef-client}} コマンド／デーモンを起動しているノードか、またはそれ以外の方法でプログラムから API にアクセスしている何らかのサービスということになります。

h2. クックブック

Chef サーバは[クックブック]を[Chef クライアント]に配布しますーー具体的に配布するのは下記です：

* [ライブラリ]
* [属性]
* [定義]
* [レシピ]

上記はクックブックの[メタデータ]に指定された依存関係にもとづき各ノードに直接配布されます。

サーバは必要に応じて[ファイル]や[テンプレート]の配布も行います。

h2. ノード

{color:#f7681a}Chef サーバは[あらかじめ共有された RSA キー|Authentication and Authorization]を利用してノードの管理と認証を行います。{color}ノードデータはインデクスされるため検索可能です。[ノード]の節に[ノード]の詳しい管理方法が書いてあります。[認証と権限管理]の節を見れば、そのモデルがどのように動いているのか学習できます。認証・権限管理がどのようなモデルで動いているのか分かります。

h2. ロール

Chef サーバは設定済みの[ロール]に関する JSON オブジェクトを保存しています。ロールはインデクスされるので検索可能です。[ロール]やその管理方法については[ロール]のページをご参照ください。

h2. データバッグ

サーバには、データバッグと呼ばれる適当な内容の JSON データを保存することもできます。データバッグはインデクスされるので検索可能です。使い方に関する詳しい情報については[データバッグ]のページをご参照ください。


\\
\\
\\
\\
{column}
{column:width=5%}
{column}
{section}
{section}
----
{column:width=45%}

!leftarrow.png|align=left,hspace=4! 
[Chef Solo]

{column}
{column:width=40%}
{column}

{column:width=15%}

!rightarrow.png|align=right,hspace=4! 
[Chef インデクサ]

\\
\\
{column}
{section}
