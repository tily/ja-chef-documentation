{section}
{column:width=3%}
{column}
{column:width=60%}
\\
{panel:bgColor=#d7d4c3}
!OC_Chef_Logo_small.png|align=left,hspace=40,vspace=8!

\\
h4. {color:#f7681a}The Chef Server provides a central point for the distribution of [Cookbooks], management and authentication of [Nodes], and the use of [Search].  

It provides two layers of functionality - a [REST API|Server API] and a human-readable Web Interface ([Open Source Chef Server Management Console]).{color}
\\
{panel}
h1. Components

The Chef Server is a [Merb|http://www.merbivore.com] web application with some additional components.

* API service.
* Management Console (optional).
* AMQP Server
* [Search indexer|Chef Indexer] and Search Engine.
* Data store with CouchDB.

h2. API Service

||Service Name|chef-server|
||Package/Gem|chef-server,chef-server-api|
||Default port|4000|

{color:#f7681a}The API service is what clients use to interact with the server to manage node configuration in Chef.{color} By default, the service is started on port 4000 as a Merb application slice running with the [thin|http://code.macournoyer.com/thin/] server adapter. 

The two methods of interaction with the API for humans are the command-line tool [Knife] and the [Open Source Chef Server Management Console]. The [Chef Client] library is used for interacting with the API for client nodes.

{column} 
{column:width=20%}
\\
{panel:bgColor=#d7d4c3} 
{toc:minLevel=1|maxLevel=2|printable=no} 
{panel} 
\\
{info:title=Bake in Scalability with Chef}
\\
Our friends at [Cycle Computing|http://cyclecomputing.com/] use a CentOS 5.5 Chef Server to provide configuration management for hundreds of systems and automate the scalability of their infrastructure.  Read their [blog post|http://blog.cyclecomputing.com/2011/05/why-baking-your-cluster-ami-limits-the-menu-devops-for-large-hpc-clusters.html] to see how they do it.
{info} 
{column}
{column:width=7%}
{column}
{section} 
{section}
{column:width=2%}
{column}
{column:width=60%}

h2. Open Source Server Management Console

||Service Name|chef-server-webui|
||Package/Gem|chef-server-webui|
||Default port|4040|

{color:#f7681a}The Open Source Server Management Console is an optional component that provides a nice way for humans to work with the Chef Server.{color} By default, the service is started on port 4040 also as a Merb application slice running with thin. The Management Console has Users that represent human logins and uses password-based authentication. Optionally, OpenIDs can be associated with Open Source Management Console users. 

The Management Console itself is an API [client|#Clients], and the private key is located in {{/etc/chef/webui.pem}}, and the default name is {{chef-webui}}. Within the Management Console are users and the default Management Console user is {{admin}} with password {{p@ssw0rd1}}. When using the [RubyGems bootstrap cookbook|LEG:Bootstrap Chef RubyGems Installation], the password is randomly generated by Chef, or can be specified by a JSON attribute.

[Open Source Chef Server Management Console] has details on its use, while Hosted Chef customers should review the [Hosted Chef Management Console]. Private Chef customers should turn to separately delivered Administration Documentation.

h2. AMQP Server

||Service Names|rabbitmq-server|
||Package|rabbitmq-server*|
||Default port|5672,4369,50229|

*rabbitmq-server package name varies by distribution.

{color:#f7681a}The Chef Server runs RabbitMQ as an AMQP server.{color} Whenever data is stored in CouchDB that needs to be indexed by SOLR, the server sends a message and the data payload to the queue, and the indexer picks it up.

h2. Search Indexes

||Service Names|chef-solr-indexer|chef-solr|
||Package/Gem|chef-solr|chef-solr|
||Default port|-|8983|

The search indexer, {{chef-solr-indexer}} listens to AMQP for messages about what to index, and then passes the results to {{chef-solr}}. Read more about the [Chef Indexer] or [Search].

h2. Data Store

||Service Name|couchdb|
||Package|couchdb|
||Default port|5984|

{color:#f7681a}Chef Server utilizes [CouchDB|http://couchdb.apache.org] for storing JSON data about [Nodes], [Roles], and [Data Bags].{color} The server requires CouchDB 0.9.1 or above for API compatibility reasons. For more information about CouchDB, please see [CouchDB's project page|http://couchdb.apache.org].

{tip:title=CouchDB Administration}
[CouchDB Administration for Chef Server]
{tip}

h1. Information Stored

The Chef Server stores several bits of information about the configured objects in the infrastructure.

h2. API Clients

{color:#f7681a}[Clients|API Clients] are entities that access the API.{color} They are stored as JSON objects in CouchDB, are indexed and searchable. Each client has a public key stored on the server, and a private key that should be copied to the client. Clients come in two flavors for accessing the API.

* Humans
* Non-humans

Humans interact with the API through [Knife] or the [Management Console]. In the Management Console, they have users, and the Management Console itself is a non-human API client whose name is chef-webui. Non-humans are [Nodes] running the {{chef-client}} command/daemon, or services that otherwise access the API programatically.

h2. Cookbooks

The Chef Server distributes [Cookbooks] to [Chef Clients|Chef Client] - specifically, it distributes:

* [Libraries]
* [Attributes]
* [Definitions]
* [Recipes]

Directly to each node based on the dependencies specified in the cookbook [Metadata].

The Server also serves up [File Distribution] and [Templates] on an as-needed basis.

h2. Nodes

{color:#f7681a}The Chef Server provides for the management and authentication of [Nodes] via [pre-shared RSA keys|Authentication and Authorization].{color} Node data is indexed and searchable. See the [Nodes] section for more details on how to manage [Nodes]. See [Authentication and Authorization] to learn how the model works.

h2. Roles

The Chef Server stores JSON objects about [Roles] configured. Roles are indexed and searchable. Learn more about [Roles] and how to manage them on the [Roles] page.

h2. Data Bags

The server can optionally store arbitrary JSON data known as data bags. Data bags are indexed and searchable. See the [Data Bags] page for more information on how to use this feature.


\\
\\
\\
\\
{column}
{column:width=5%}
{column}
{section}
{section}
----
{column:width=45%}

!leftarrow.png|align=left,hspace=4! 
[Chef Solo]

{column}
{column:width=40%}
{column}

{column:width=15%}

!rightarrow.png|align=right,hspace=4! 
[Chef Indexer]

\\
\\
{column}
{section}