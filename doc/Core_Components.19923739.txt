{section}
{column:width=3%}
{column}
{column}
\\
{panel:borderColor=#f7681a|borderWidth=2}
!basics.png|align=left,hspace=20,thumbnail!
\\
h5. {color:#f7681a}Chef を使うようになると、それぞれの構成要素がどんな意味をもち、どのように協調しているかを理解する必要が出てくるでしょう。

このページではそのような構成要素をざっと解説します。それぞれの要素にはより詳細を記したページが用意されています。{color}
\\
{panel}
h1. インフラをモデリングする

h3. ノード
[ノード]は Chef クライアントを起動させるホストです。Chef 全体から見ると、ノードがどんな[属性]と実行リストを持っているかが重要になります。[ノード]は[レシピ]と[ロール]が適用される対象です。 [ノード]に対してはいつでも下記の操作を行うことができます：

* システムに対してレシピを追加する
* 属性を更新する

h4. 実行リスト
もっとも単純なケースでは、実行リストというのはノードが実行する[レシピ]の一覧です。クックブックのメタデータが正しければ、実行リストにレシピを加えるだけで、そのレシピが依存している他のレシピも必要になったとき自動的に実行されます。どのような順番で記述するかが重要です：Chef は実行リストに記述されたのとまったく同じ順番でレシピを実行します。

より進んだ使い方として、実行リストには明示的にノードに対して設定されたレシピの他に、ノードに割り当てられた[ロール]を含むことができます。この場合には、Chef クライアントが起動したときに、実行リストはレシピだけの一覧に「展開」されます。つまり、実行リストの中にロールがあれば、そのロールが指定するレシピの一覧への置き換えが行われるのです。

{column} 
{column:width=25%}
\\
{panel:bgColor=#d7d4c3} 
{toc:minLevel=1|maxLevel=4|printable=no} 
{panel} 
\\
{info:title=Introduction to Chef}
\\
Opscode のチーム・メンバーである [Sean O'Meara|http://community.opscode.com/users/someara] が 2011 の LISA のプレゼンテーションで使った [Introduction to Chef|http://speakerdeck.com/u/someara/p/introduction-to-chef-lisa11] という素晴らしいスライドがあります。
\\
{info}
{column}
{column:width=5%}
{column}
{section} 
{section}
{column:width=3%}
{column}
{column}

h4. [ノードの属性|属性]
ノードとロールには関連づけられた[属性]があります。属性の構造はネストしたキーバリューのペアです。ノードやロールの属性は通常、リソースの属性に対する入力として利用されます。たとえば、開発環境であるバージョンの nginx を使っているが、ステージング環境ではテスト用にもっと新しいバージョンを入れたい、というような場合です。ノードやロールの属性でバージョンを指定すれば、同じレシピを両方の環境で使うことができます。

Chef では属性ファイルの中で属性を設定することができます (他にもたくさんやり方はありますが)。属性ファイルのコードで Chef が実行されるノードにアクセスし、そのノードの属性を直接管理できます。Ruby の用語を使うなら、属性ファイルにおける `self` の値はノードになります。属性ファイルを使うことで、レシピを書くときにノードのある属性にまともな値が設定されていると信頼することができるし、ノードがまだその値を決定していないのではないかと心配する必要もなくなります。

Chef の上級者は、ロールの中に属性を定義しまくり、たくさんあるノードの属性を一気に管理することが多いようです。

h3. [ロール]
[ロール]を使えば、たくさんあるノードの中から機能の似ているものをグループとしてまとめることができます。ウェブをスケールさせる際には、「1 つしかない」ということはほとんどあり得ないので、いくつかの設定項目はあるノード・グループ内で共通のものだと、ロールを使って表現します。ロールはノードと同じ要素から成り立っています：[属性]と実行リストです。Chef クライアントは起動時に、自分の持つ属性・実行リストを、割り当てられたロールの持つ属性・実行リストとマージします。

h1. ノードを設定する

h3. [クックブック]
クックブックは、システムを設定するために利用する[レシピ]、[リソース定義|定義]、[属性]、[ライブラリ]、[クックブック・ファイル|File Distribution]、[テンプレート|テンプレート]と、[メタデータ]を集めたものです。クックブックは、だいたい 1 つのパッケージまたはサービスを設定するものという単位でまとめられます。たとえば MySQL のクックブックにはクライアント・サーバ両方のレシピが含まれており、さらには属性ファイルの中には、設定可能な値にまともなデフォルト値が割り当てられています。

Chef ではクックブックという単位で配布と共有を行います。Chef を使っている時間のうちのほとんどは、クックブックを書くことになります。

h3. [レシピ]
レシピは[リソース](後述)を書くファイルです。レシピには任意の Ruby コードを含むことができますが、生産的に使うためには Chef がどのように実行されるのかを少し理解する必要があります。Chef の実行は 2 段階です：最初のステップ、いわゆるコンパイル・ステップでは、Chef がレシピファイルを評価し、リソースの全一覧を作ります。次のステップで Chef はそのリソースのプロバイダの中で、それぞれのリソースにとって好ましいアクションを実行します。Chef 実行のうち、本当に実行するフェーズまでコード実行を先延ばしにするためには、[ruby\_block|リソース#Resources-RubyBlock]を使ってください。この実行の流れについてのもっと詳しい説明は、[Chef 実行の解剖図]を参照してください。

h3. [メタデータ]
クックブックはしばしば他のクックブックの持つ機能を前提とし、依存しています。サーバにあるクライアントへどれとどのクックブックを届ければよいか知らせるため、他に依存しているクックブックはどこかでその依存関係を表現している必要があります。その「どこか」が[クックブックのメタデータ|メタデータ]です。依存性の追跡がメタデータのもっとも見えやすい部分ですが、他にも作者名だとか、ライセンスだとか、クックブックの説明だとか、そのクックブックが有効であるプラットフォームであるとか、他のクックブックと組み合わせたときでもうまく動くとか動かないとか、そういった情報を含むことができます。目下のところ、Chef では実際に使うよりはるかに多い項目をメタデータに記述できますが、正確な依存情報を保守していくことだけは必要不可欠です。もしその情報が不完全ならば、ノードは必要としているすべてのクックブックを取得することができなくなってしまうのですから。

h3. [リソース]
[リソース]は _普通、_ そのホストに対して設定しようとしていることを、プラットフォームを意識しなくてよいレベルまで抽象化してくれます。たとえば、パッケージというものは apt や yum、 BSD ports/packages 等のパッケージ・システムを通してインストールしますが、パッケージのリソースは各システム間の違いを抽象化してくれるので、「あるパッケージがインストールされているべき」というのがプラットフォームを意識せずに指定することができます。Chef のリソースはだいたいは単なるデータの入れ物であり、いくつか基本的なバリデーションの機能を持っています。

リソースは[レシピ]や[定義]で宣言されます。この 2 つは Chef における基本的な機能単位です。

{float:right|background=#f4f2e6|padding=10px|width=660px}
{tip:title=Resource Attributes or Parameters}
\\
Chef の開発者の間で、リソースの属性を「パラメタ」に名前変更し「属性」という用語を多重に使わないようにしようという議論がありました。というのも、属性という言葉はノードやロールにひもづいたデータを指すのにも使われるからです。 _現在のドキュメントでは「属性」という言葉を使っていますが、ノードの属性とは別物だということを覚えておいてください_
{tip}
{float}
h4. [リソース属性]
上述のように、リソースは普通、データの入れ物です。属性はリソースという入れ物の入るデータのまとまりのことです。パッケージ管理の場合では、インストールしたいパッケージの名前とか、インストールしたいバージョンとか、パッケージ・マネージャに渡したいオプション引数だとかにあたるでしょう。

h4. アクション
アクションは、Chef にやってもらいたいリソースに対する操作のことです：そのパッケージをインストールするのか？ 最新版にアップグレードするのか？ アクションは普通はリソースに特有のものですが、すべてのリソースで _nothing_ という、名前通りのアクションも使えます。

h3. [プロバイダ]
[プロバイダ]は、リソースが抽象化しようとしているものをプラットフォームに特化して実装したものです。Red Hat や CentOS では yum パッケージのプロバイダを使ってパッケージをインストールしますが、Debian や Ubuntu では apt パッケージのプロバイダが使われるでしょう。プロバイダはかなり重要な意味を持っています：Chef がべき等であるようにアクションを実行する必要があるかチェックし、そのアクションを実行するためのコマンドをシステムに送るのです。パッケージのプロバイダで言うと、望ましいバージョンのパッケージがインストールされているか確認したのち、必要なときだけ yum や apt-get や他のパッケージ・マネージャのコマンドを送ってインストールやアップグレードを行うのです。Chef を使っているとき、普通はプロバイダの存在を気にかける必要はありません。気にかけたくなったときには、Chef の「ショートカット」リソースなら、いつでも望ましいプロバイダを使ってくれます。たとえば dpkg\_package リソースや rpm\_package リソースなら、パッケージ・マネージャに固有のプロバイダを利用して、ファイルシステム上から直接パッケージをインストールすることができます。

プロバイダは[リソース]に対してアクションを実行します。任意の[ノード]ではデフォルトでどんな[プロバイダ]が使われるべきかを決めてくれるし、[リソース]から明示的にプロバイダを指定することもできます。

h3. [検索]

[検索] は Chef サーバの機能であり、好きなようにインフラに関するデータを問い合わせることができます。たいていの場合は、[レシピの中から呼び出して|Recipes#Searching]検索を利用することになります。

{float:right|background=#f4f2e6|padding=10px|width=660px}
{info:title=データバッグに必要な Chef のバージョン要件}
\\
0.10.4 から、データバッグはすべての種類の Chef で利用できます。0.10.4 より前の Chef クライアントでは、Chef ホスティングか、0.10.4 以降のオープンソース版 Chef サーバを利用する必要があります。
{info}
{float}
h3. [データバッグ]

[データバッグ] は Chef サーバにある (属性と同じで) ネストしたキーバリューのデータです。データバッグは検索可能であり、レシピから直接名前を指定してロードすることも可能です。データバッグは Chef サーバがインストールされている環境ではどこからでもアクセスできますーーインフラ全体の属性と考えてもよいでしょう。

h3. [環境]

[環境]は 1 つの Chef システム (または Chef ホスティングなら 1 つの組織) の中で、本番・ステージング・開発・テストといったさまざまなアーキテクチャ別の環境を管理するためのメカニズムです。環境を使えば、ロールの中に環境毎の実行リストを指定したり、環境毎の[クックブック]のバージョンを指定したり、環境固有の属性を指定したりできます：これによって、ポリシーを設定し、あるインフラ内セグメントの中でクックブックのどのバージョンを使いたいのかを記述することができます。環境は 1 のシステムの中における特定のやりとりを複数に分離するものではなく、システム内である範囲のサーバ群にバージョン制限をかけますーーアプリケーションサーバ・データベースサーバ等を持つ、開発・テスト・本番それぞれの環境というように。[ロール]はサーバをグループ化し、それぞれの機能を果たすようなサーバのグループ分けであり、環境をまたぐことができますーーたとえば：アプリケーションサーバ・ウェブサーバ・データベースサーバというように。すなわち、ロールの中で環境毎に実行リストを設定することができるのですーーたとえば：開発環境ではアプリケーションサーバをテスト環境とは違ったロードバランサに接続したいとか、そのような記述を同じ[レシピ]の中に含めることができます。

h1. Chef を管理する

h3. [Knife]

[Knife] は Chef サーバへ接続するためのコマンドライン・インタフェースですが、chef-solo にとって有用な機能も提供しています。

h3. [管理コンソール]

[管理コンソール]は Chef サーバの API へのウェブインタフェースです。ユーザ・ノード・ロール・クックブック・データバッグ・API クライアントを含むたくさんの構成要素をこのコンソールから管理することができます。[Chef ホスティングの管理コンソール]では、お客さまが請求情報やアカウント情報といった自分のプロフィールに関する情報を編集することができ、Chef ホスティングの権限管理も行うことができます。

h3. [Shef]
[Shef] は Chef のコーンソールです。対話的にレシピを書き、実行し、デバッグすることができます。Chef 0.9.8 からは、Chef サーバにあるデータを読み込んだり編集したりする機能もサポートされるようになりました。

\\
----
bq. *注記：* このページに書いてある情報のうちいくらかは、作者である Opscode のメンバー [Dan DeLeo|https://twitter.com/#!/kallistec] に許可を得た上で、[Chef Speak|http://kallistec.com/2010/02/01/the-chef-way-episode-2-chef-speak/] に修正を加えたものです。
\\

\\
\\
\\
\\
{column}
{column:width=5%}
{column}
{section}
{section}
----
{column:width=45%}

!leftarrow.png|align=left,hspace=4! 
[アーキテクチャの紹介]

{column}
{column:width=40%}
{column}

{column:width=15%}

!rightarrow.png|align=right,hspace=4! 
[クックブックその他いろいろの紹介]

\\
\\
{column}
{section}
