{section}
{column:width=3%}
{column}
{column:width=55%}
\\


!OC_Chef_Logo_small.png!


h4. _これは「Chef の概要についての」FAQ です。_

h5. {color:#f7681a}一般的なトラブルシューティング TIPS と技術的な FAQ に関しては、[トラブルシューティングと技術的な FAQ|Troubleshooting and Technical FAQ]をご参照ください。{color}
{column}
{column:width=35%}
\\
\\
{panel:bgColor=#d7d4c3}
{toc:minLevel=1|maxLevel=2|printable=no}
{panel}
{column}
{column:width=7%}
{column}
{section}
{section}
{column:width=2%}
{column}
{column:width=60%}
!tim-group-color.jpg|align=right,hspace=8,vspace=8!
h2. どうして Chef を作ったのですか？

[Opscode|http://www.opscode.com] は [HJK Solutions|http://www.hjksolutions.com] という名前のコンサル会社としてスタートしました。スタートアップ企業のために完全に自動化されたインフラを構築していましたーーOS のインストールからアプリケーションのデプロイまで、すべてが統合され準備万端となっていました ([どんなアプローチだったかは Slideshare の資料で知ることができます|http://www.slideshare.net/adamhjk/why-startups-need-automated-infrastructures])。

1 年もの間、同じやり方で数十のさまざまなスタートアップ企業のインフラを構築してきましたが、このやり方では、たとえシステム管理の専門知識を持っていたとしても、 *誰もが* 完全に自動化されたインフラを持つようにはならないだろうなと気づきました。いくつか課題点があったのです：

* 完全に自動化されたインフラは完全に統合されたインフラですーーさまざまな要素がお互いに意思疎通できる必要があります (アプリケーションがインフラに情報を伝えたり、インフラがアプリケーションに情報を伝えたり)。
* 構成管理はインフラ自動化にとって根本的であり書かせない要素ですーーインフラを完全に自動化するためには、構成管理がサービスとして利用できるようになっている必要があります。
* インフラを構築するためのコードを共有するのが難しいですーーその時使っていたツールには高度な専門的な知識が必要だったので、共有することが困難でした。

私たちは下記のようなやり方でこのような問題を解決しようとしています：

* 構成管理システムをベースとしてシステム統合フレームワークを作ります。フレームワークは Ruby で動き、とてもシンプルな DSL が使えますーー初心者でも近づきやすいように。
* Chef が扱える範囲を簡単に拡張できるようにし、ぱっと書いたソースコードから Chef の[リソース]がアクションを起こせるようにします。 (この機能はまだリリースされていませんが、もうすぐ発表したいと思っています。素晴らしい機能ですよ。)
* Chef に関するすべての決断は、できる限り[クックブック]の中で行われるように考慮されていますーークックブックという単位で自動化を共有し、簡単に再利用・拡張が行えるようにします。

目標はインフラ自動化の手順を完全に自動化することですーーChef はそれを実現するためのフレームワークにとっての、最初の一部分なのです。

h2. どうやって援助すればいいですか？

私たちの [IRC] に参加したり、[Chef のメーリングリスト|Support#MailingLists]に登録したり、[Opscode のオープンソースプロジェクトに貢献するにはどうすればいいか|chef:How To Contribute]を読んだりしてください。

!sethC-explaining.jpg|align=left,hspace=20,vspace=8!
h2. どんな人が Chef を使っているのですか？

[Chef 導入済みの会社・組織一覧|http://www.opscode.com/adoption] の一例をご覧ください。

h2. Chef を信頼して大丈夫ですか？

大丈夫です。Chef があなたのシステムに対して行うのは、[レシピ]に書いていることだけです。Chef はオープンソースのプロジェクトなので、ソースコードはすべて参照可能です。

h2. Chef を使うのに Ruby の知識は必要ですか？

知識があれば役に立ちますが、必須ではありません。[Chef を使うために必要なほんの少しだけの Ruby|Just Enough Ruby for Chef] を学習できます。

h2. なぜオープンソースのツールに修正を加えるのではなく新たに Chef を作ったのですか？

Chef はさまざまなツールを使って自動化された本番インフラを構築してきた経験から生まれたものです。そのような経験から伝統的な構成管理よりもずっと良いツールの要件をはっきりと定義することができました。多種多様なオープンソースのツールを調査しましたが、私たちの要件に合ったものは見つかりませんでした。

開発者は自分のソースコードに組み込んで使えるツールが必要としています。Chef と Ohai には [Apache License Version 2.0|http://www.apache.org/licenses] が適用されていますーー自由主義でコピーレフトかつフリーなソフトウェア・ライセンスです。私たちは貢献のためのライセンス合意書を管理しているので、誰もが著作権や特許権のゴタゴタがないと安心して Chef や Ohai を使うことができます。

h2. どうして Apache ライセンスを選んだのですか？

[「どうして Apache ライセンスを選んだか」というブログ記事|http://blog.opscode.com/blog/2009/08/11/why-we-chose-the-apache-license/]で詳しく書いています。

h2. Chef は Puppet とどう違うのですか？

!sethF-2645.jpg|align=right,hspace=20,vspace=8!

[Puppet は Cfengine を元に進化し|http://reductivelabs.com/trac/puppet/wiki/CfengineVsPuppet]、構成管理には新しいやり方にもありうることを示しました。

Chef のもともとの設計は、私たちが Puppet のプロジェクトと協同し、貢献してきた経験から強い影響を受けています。しかしながら、Chef は Puppet のコードを少しも使っていないし、Puppet から「派生した」プロジェクトではありません。

h4. Chef は、いくつかの重要な点で Puppet とは異なります：

* Chef は Ruby を設定ファイル用の言語として使っています。特別な DSL としては使っていません。
* Chef は頭からつま先まで他のツールと連携できるように、そしてその連携ができる限りシンプルになるように設計されています。Chef はインフラの正準表現ではありません。インフラの状態についてのデータを見えるようにしてくれるサービスなのです。
* Chef は[レシピ]で指定された順番にリソースを適用しますーー依存性の管理は行いません。これは何度 Chef を実行しても管理下にあるリソースは毎回同じ順番で適用されるということを意味しています。
* Chef の[リソース]にはアクションという概念があり、アクションに合図を送ることができます。
* [リソース]は Chef の中に 2 度以上現われることがありますが、以前に現れたときの属性を受け継いでいます (すなわち、レシピの中で Apache に起動して停止するように命令するときには、リソースを 2 回指定しますが、2 度目のときには「アクション」という属性を変えるだけでよいのです)。

Chef が成長すれば、サービスのインタフェースは Puppet とも連携できるようになるでしょう。やり方は 1 つではないです。

h2. Cfengine とはどう違うのですか？

Cfengine とはほとんど共通点がありません。Single Copy Nirvana を採用しているというぐらいです。

\\
\\
\\
\\
{column}
{column:width=5%}
{column}
{section}
{section}
----
{column:width=45%}

!leftarrow.png|align=left,hspace=4! 
[さまざまな種類の Chef]

{column}
{column:width=40%}
{column}

{column:width=15%}

!rightarrow.png|align=right,hspace=4! 
[Chef の基本]

\\
\\
{column}
{section}
