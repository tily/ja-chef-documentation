{section}
{column:width=3%}
{column}
{column}
\\
!952.gif|align=left,hspace=20,vspace=2!
{panel:borderColor=#f7681a|borderWidth=2}
h5. \\{color:#f7681a} この記事ではクックブック・レシピ・属性・ロールを簡単に紹介しています。

これらの項目は Chef ワークステーション上、または WebUI から作成され、Chef サーバに保存されます。
{color}
\\
{panel}
{column}
{column:width=25%}
\\
{panel:bgColor=#d7d4c3} 
{toc:minLevel=1|maxLevel=2|printable=no} 
{panel} 
{column}
{column:width=5%}
{column}
{section}

{section}
{column:width=3%}
{column}
{column}
h1.クックブック
{float:left|background=#eeeeee|border=4px solid #d7d4c3|padding=4px|margin=10px|width=180px}
{center}
{color:navy}*クックブックは Chef で配布の基本となる単位です。*{color}
{center} 
{float}
{color:#f7681a}クックブックによって Chef や Chef ホスティングのユーザは設定情報をパッケージ化し、配布し、共有します。{color} インフラ自動化に必要なリソースをすべてカプセル化してくれ、他の Chef ユーザとも簡単に共有することができます。
!chef-basics-cookbook.png|align=right,hspace=10,vspace=14!
クックブックは、レシピ・属性ファイル・テンプレート・それ以外の設定情報に関する作成物を含んでいます。

Chef が起動するとき、ノードの実行リストに並んでいるレシピは、そのレシピを含むクックブックの他の内容と共に、ノードに転送されます。転送されたレシピはノードに適用され、ノードは適切な状態に設定されます。

典型的には、1 つのクックブックは、そのサーバの 1 つのサービス・パーツだけを設定するのに必要な情報を含んでいます。たとえば、"users" というクックブックではそのサーバにアクセスする権限を持つユーザの一覧を設定するし、"apache" というクックブックでは Apache ウェブサーバを設定します。

{color:#f7681a}クックブックは基本的なプログラミングのスキルがある人なら誰でも作れるし、デプロイする環境に特化した詳細事項を保存しておく必要はありません。{color} このおかげでクックブックを安全に共有し、組織や会社の境界をこえて再利用することができるわけです。Opscode はユーザにぜひ [コミュニティのサイト|http://community.opscode.com/cookbooks] でクッブックを発表してほしいと思っています。サイトには既に自由に選べる 300 以上のクックブックがあります。その結果として、よく使われているような技術ならば、新しいクックブックを書かなくてもインストール・設定することができるのです。

もし Chef のレポジトリに git を使うなら (詳しくは [Chef レポジトリの作り方] 参照)、Chef のコマンドラインツール [Knife] を利用してすばやくコミュニティの人たちが書いたクックブックを取得して使うことができます。たとえば、シンプルな "getting-started" クックブックをダウンロードするには、Chef レポジトリで下記を実行してください：

{code}
knife cookbook site install getting-started
{code}

このクックブックを Chef サーバ・Chef ホスティングへアップロードするには：

{code}
knife cookbook upload getting-started
{code}

そして、このクックブックに含まれる "default" レシピをあるノードの実行リストに追加するには：

{code}
knife node run_list add my_node 'getting-started::default'
{code}

Chef は新しいクックブックの作成が簡単になるツールも提供しています。たとえば、Chef レポジトリの中に新しいクックブックの基本構造を作るには、knife を使います：

{code}
knife cookbook create new_cookbook_name
{code}

h2. レシピ
{float:left|background=#eeeeee|border=4px solid #d7d4c3|padding=4px|margin=10px|width=180px}
{center}
{color:navy}*レシピは Chef で設定の基本となる単位です。*{color}
{center} 
{float}
{color:#f7681a}レシピは Ruby のファイルであり、Chef のドメイン特化言語 (DSL) を使ってノードの特定個所がどのように設定されるべきかを定義します。{color}のちの節で見るように、レシピの中でデータと Ruby コードを組み合わせて使うことで、ノードの設定を動的に変化させることです。

クックブックには複数のレシピを含むことができ、それぞれのレシピは {{クックブック名::レシピ名}} というフルネーム形式で実行リストに追加することができます。ロールとレシピだけが実行リストに追加できます。

しかしながら Chef は、実行リストの中にレシピやクックブックの名前を書く際に、ショートカット記法も用意してます。(いくつかのノードで基本設定を行うレシピを指定できるので便利です。)

{{COOKBOOK_NAME}} を実行リストに追加すると、Chef は指定したクックブックの中の "default" という名前のレシピを使いたいんだなと推測してくれます。たとえば、さっき出てきたノードの実行リストにレシピを追加する knife コマンドを修正してみましょう。このショートカットを使えば、さっきのコマンドをシンプルにすることができます：
{code}
knife node run_list add my_node getting-started
{code}

この修正後の例でも、さっきの例と同じように "my_node" の実行リストに "getting-started" クックブックの中の "default" レシピを加えたことになるのです。

h2. リソースとプロバイダ
{float:left|background=#eeeeee|border=4px solid #d7d4c3|padding=4px|margin=10px|width=180px}
{center}
{color:navy}*リソースは Chef で機能の基本となる単位です。*{color}
{center} 
{float}

{color:#f7681a}リソースは適切に設定されたノードを作るために使う構成部品です。{color} そのホストに対する設定内容を、プラットフォームを意識しなくてよいレベルまで抽象化してくれますーシステム設定を別々のカタマリにまとめたものであり、レシピへ書いておくとノードに適用されます。

リソースの重要な特徴は、ノードの設定を記述することに集中することができ、設定作業をどうやって達成させたのかについて細かく気にしなくていいということです。

たとえば、下記のリソースではノードにユーザを追加します：

{code:lang=ruby}
user "sam" do
     home "/home/sam"
     shell "/bin/zsh"
     comment "Sam loves DevOps"
     action :create
end
{code}

このリソースはノードに作成したいと思っている "sam" というユーザについて記述しています。{color:#f7681a}実際にユーザを作成するのは *[プロバイダ]* であり、新規ユーザ作成に必要なコマンドを実行します。{color}

{float:left|background=#eeeeee|border=4px solid #d7d4c3|padding=4px|margin=10px|width=180px}
{center}
{color:navy}*プロバイダのおかげで、1 つのリソースで複数のプラットフォームをサポートできるのです。*{color}
{center} 
{float} 

リソースはそれぞれ複数のプロバイダを持っており、各プロバイダがそれぞれのプラットフォームでどのように必要なタスクを遂行すればよいか把握しています。chef-client はノードのプロバイダに一番適したプロバイダを選んでくれます。それゆえ、1 つのリソースを記述するだけで、Linux でも FreeBSD でも特に修正を加えることなく、"sam" というユーザを作成することができます。

{color:#f7681a}上に挙げたユーザ・リソースの書き方が良い例ですが、Chef のドメイン特化言語 (DSL) でのリソース記述方法は以下のようになっています：{color}

{code:lang=ruby}
resource_type "resource_name" do
  resource_attribute value
  ...
end
{code}

*resource_type* にどんな種類のリソースを設定したいか書きます。いろいろな種類のリソースを Chef の DSL で定義することができます。どんなリソースがあるかは[リソース]のページを見れば分かります。Chef に詳しくなりもっと複雑な使い方をしたくなったら、Chef の DSL を拡張して自分のリソースが定義できるようにするさえ可能です。

*resource_name* にはそのリソース・インスタンスを識別するための一意な文字列を指定します。あるノードに設定を適用するために、たくさんのユーザ・リソースを定義する必要があるとしたら、それぞれのユーザ・リソースが自分の名前を持ち、他のリソースから参照可能となります。また、デフォルトでリソースの名前は、「リソースの属性」の 1 つとして扱われます。たとえば、上の例で定義されたユーザ・リソースの場合には、chef-client は "sam" という名前をユーザ名として利用して、ユーザを作成します。

*resource_attribute* とそこに指定された *value* に、リソースがどんな状態になってほしいかを記述します。リソースには種類によってさまざまな属性があり、それぞれのリソース内で独自の意味を持っています。上記の例では、"create" というアクションを使って「そのユーザを作成してほしい」ということを表現しています。sam が組織からいなくなったとしたら、アクションを ":delete" に変えてユーザを削除すればよいのです。

利用可能なリソース属性とデフォルト値の一覧は、[リソース]のページに細かく書いてあります。

chef-client が実行リスト内のレシピを読み込むとき、
# それぞれのレシピを ruby のコードとして実行します。
# リソースが出てくるたびに、そのノードに関するリソース一覧に追加されていきます。
# それからリソースのプロバイダが、リソースに書いてある通りの状態にするために、アクションを実行する必要があるかどうか判断します。

_このようにして、Chef のコアをなす原則「べき等」が実現されるのです。 _{color:#f7681a}*べき等* であるということは、あるマシンに何度リソースを適用したとしても結果は変わらず、常に適切に設定されたマシンを得ることができるということです。{color}

h2. 属性とテンプレート
{float:left|background=#eeeeee|border=4px solid #d7d4c3|padding=4px|margin=10px|width=200px}
{center}
{color:navy}*属性はノードに関するデータであり、動的に読み込まれます。*{color}
{center} 
{float} 

{color:#f7681a}属性というのは、ネスとしたキーバリューストアであり、ノード自体の情報やノードにどんな設定が適用されているかを知ることができます。{color}いくつかの属性は、chef-client を実行したとき一番はじめに収集されます。収集されるのはノードの IP アドレス・ホスト名・読み込まれたカーネルモジュールの一覧などです。他の属性は、クックブックなど別の場所から追加されます。 (ロールや環境でも属性を設定することができるのですが、この機能については他の節で詳しく書きます。)

属性によって、ノードの特徴に基づいて設定内容を変更し、まともなデフォルト値を設定することができるし、そのデフォルト値を変更するのも簡単にできます。属性を設定する 1 つの方法として、クックブックの属性ファイルから行うやり方があります。

たとえば、次の例ではとある設定ファイルの置き場所について、まともなデフォルト値を設定しています：

{code:title=属性ファイルの例}
default["my_application"]["config_location"] = "/etc/myapp.conf"
{code}

ここで設定された属性は、設定ファイルを管理するリソースの中ですぐに使うことができます：

{code}
template node["my_application"]["config_location"] do
         action :create
end
{code}

{float:left|background=#eeeeee|border=4px solid #d7d4c3|padding=10px|margin=4px|width=200px}
{center}
{color:navy}*テンプレートは設定ファイルのようなものですが、変数やもっと複雑なロジックに基づいて、ファイルの内容を動的に生成することができます*{color}
{center} 
{float} 

{color:#f7681a}[テンプレート]という Chef の機能で、ファイルの内容を動的に生成することができます。仮にそのファイルを何度もレシピの中で参照していたとしても、1 つの属性を変えるだけでファイルの置き場所を変更することができます。

ノードの属性を使い、レシピの中でノードの情報を使うこともできます：

{code}
if node.attribute?("ec2")
   # Do EC2 specific configuration tasks.
end
{code}
このような仕組みのおかげで、レシピに「Amazon EC2 で動かしているときだけ設定タスクを行いたい」というのを指定できます。属性についての完全なドキュメントを読みたいなら、[属性]を参照してください。

h1. ロール
{float:left|background=#eeeeee|border=4px solid #d7d4c3|padding=4px|margin=10px|width=200px}
{center}
{color:navy}*ウェブをスケールさせる際には、「1 つしかない」ということはほとんどあり得ません。*{color}
{center} 
{float} 

1 つのノードに設定を適用するにしても、さまざまなクックブックが必要となります。 {color:#f7681a}機能が似たノードをグループ分けしたいなら、Chef のロールを使えばよいでしょう。{color} ロールはノードと似ていますが、ある機能に特化した実行リストと属性を持っています。たとえば、"webserver" というロールを作成し、インフラでウェブサーバがよく受け持っているようなサービスをすべて含ませることができます。ノードの実行リストにはこのようなロールを含ませることができるのです。

ノードの実行リストにロールが含まれるなら、ロール自体の実行リストが展開されてノードの実行リストに追加されます。これによって確実に、あるロールに必要なすべてのレシピをノードに適用することができます。

ロールでは属性を設定することもできます。ロールで属性を設定すれば、クックブックに定義された汎用的なデフォルトの属性を、あるロールに特化したノード向けの値で上書きすることができます。

{center}
!chef-basics-roles.png!
{center}

h1. 環境
{float:left|background=#eeeeee|border=4px solid #d7d4c3|padding=4px|margin=6px|width=200px}
{center}
{color:navy}*1 つの Chef の中で複数のスペースを管理できます*{color}
{center} 
{float}

{color:#f7681a}[環境]は 1 つの Chef システム (または Chef ホスティングなら 1 つの組織) の中で、本番・ステージング・開発・テストといったさまざまな環境を管理するためのメカニズムです。{color} 環境を使えば、ロールの中に環境毎の実行リストを指定したり、環境毎の[クックブック]のバージョンを指定したり、環境固有の属性を指定したりできます。 _[#ロール]は環境と異なり、サーバを機能ごとにグループ分けしてくれるものであり、環境をまたぐことができます_ ーーたとえば：アプリケーションサーバ・ウェブサーバ・データベースサーバというように。すなわち、ロールの中で環境毎に実行リストを設定することができるのですーーたとえば：開発環境とテスト環境でアプリケーションサーバが接続するロードバランサを変えたいとか、そういう記述を同じ[#レシピ]の中に含めることができます。

環境を作成・管理するのにはいろいろなやり方があるので、置かれている状況やインフラの種類に合わせて選ぶことができます。詳しくは[環境]を参照してください。

h1. まとめ

* クックブックにはレシピ・属性ファイル・その他の情報が含まれる。
* リソースはレシピの構成部品であり、ノードの適切な設定内容を記述できる。
* リソースはべき等。ノードに同じリソースを 2 度適用しても結果は同じになる。
* プロバイダは必要になったときだけアクションを実行し、確実にノードの状態がリソースで記述したのと同じになるようにしてくれる。
* 属性のおかげでレシピから、チューニング可能なパラメタやノードに関する情報を利用することができる。
* ロールを使うと、特定の役割を持ったノードをまとめて記述することができる。ロールには実行リストと属性が含まれる。
* 環境を使うと、 1 つの Chef の中でインフラをいくつかのスペースに区切り、管理することができる。


h1. 続きをどうぞ！

さてお次は Chef の非常にパワフルな 2 つの機能：

* 次のステップ：[検索とデータバッグの紹介]

h1. もっとよく知りたいなら

* [クックブック]
* [リソース]
* [プロバイダ]
* [属性]
* [ロール]
* [テンプレート]
* [環境]

\\
\\
\\
\\
{column}
{column:width=5%}
{column}
{section}
{section}
----
{column:width=45%}

!leftarrow.png|align=left,hspace=4! 
[コアとなる要素]

{column}
{column:width=40%}
{column}

{column:width=15%}

!rightarrow.png|align=right,hspace=4! 
[検索とデータバッグの紹介]

\\
\\
{column}
{section}
