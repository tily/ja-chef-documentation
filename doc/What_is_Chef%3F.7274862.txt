{section}
{column:width=3%}
{column}
{column:width=60%}

!chefhigh.jpg|align=right,border=1,hspace=12,vspace=4!

h5. {color:#f7681a}Chef を利用するなら、インフラの各パーツがどんな風に作られてほしいのか、抽象化されたソースコードの形で定義し、それからその内容をそれぞれのサーバに適用する、という流れになります。

_その結果は完全に自動化されたインフラです_：新しいサーバが用意されてきたときでも、そのサーバがアーキテクチャの中でどんな役割を果たすのかを Chef に教えてやるだけで済みます。{color}

h2. Chef が提供するもの
!chefsi.png|border=1,align=right,hspace=14,vspace=6!
h4. {color:#f7681a}サーバ調達{color}

Chef はシステムに対してコマンドを実行したり、API を呼び出したりしてサーバを調達します。具体的には RESTful な API  や knife というコマンドライン・インタフェースを利用します。物理サーバの場合、Chef は Linux の Kickstart や Solaris の Jumpstart、AIX の NIM のような仕組みと連携します。仮想化された環境では、libvert やハイパバイザ (XEN, KVM, VMware) 専用の API と連携します。クラウドを利用する場面でも、直接クラウドの API を叩いて AWS や vCloud といったプラットフォーム上にサーバを調達できます。また、Ruby の fog や Java の jclouds といったような、各言語の持つオープンソースのクラウド抽象化ライブラリと連携することも可能です。

h4. {color:#f7681a}構成管理{color}

Chef はまったくをもって汎用的な構成管理ツールです。ロールやレシピを使えばサーバをどんな風に設定したいか記述できます。Chef を動作させるために、あなたはレシピを書き、そのサーバがどんなロール (Apache とか MySQL とか Hadoop とか) を持つべきか記述するのです。そのレシピには一連のリソースがどんな状態になっていてほしいかを書くことになるでしょうーーたとえば、インストールされているべきパッケージだとか、起動しているべきサービスだとか、書き出されているべきファイルだとか。そのような記述をふまえた上で、Chef は各リソースが適切に設定されていることを確認し、必要なときだけ正しいアクションを起こしてくれます。だからこそ、安全で柔軟なメカニズムと言えるし、サーバがいつでもあるべき状態を保持しているというのを保証できるわけです。

h4. {color:#f7681a}システム統合{color}

わたしたちはシステム統合を達成してこそ真のインフラ自動化だと思っています。Chef の強力な特長として、設定ロジックから設定データを分離できるように設計されているのが挙げられます。あなたのインフラに関するデータは動的に NoSQL データベースへと保存・インデクスされるので、強力な検索 API でインフラやアプリケーションに関する情報を検索することができます。言い換えるなら、Chef のレシピはデータ駆動なので、サーバ間で動的なシステム統合が行えるというわけです。たとえば、ウェブサーバを設定するときに検索 API を呼び出し、データベースサーバや Memcache サーバを見つけて、ウェブサーバの設定を更新することができます。同じように、ロードバランサのレシピの中で自動的にウェブサーバを設定に組み込むこともできるのです。

\\
\\
\\
\\
\\
\\
\\
{column}
{column:width=5%}
{column}
{section}
{section}
----
{column:width=45%}

!leftarrow.png|align=left,hspace=4! 
[概要|About]

{column}
{column:width=40%}
{column}

{column:width=15%}

!rightarrow.png|align=right,hspace=4! 
[Chef のコアとなる原則|Chef Core Principles]

\\
\\
{column}
{section}
