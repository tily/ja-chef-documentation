{section}
{column:width=3%}
{column}
{column:width=60%}

!chefhigh.jpg|align=right,border=1,hspace=12,vspace=4!

h5. {color:#f7681a}With Chef, you write abstract definitions as source code to describe how you want each part of your infrastructure to be built, and then apply those descriptions to individual servers. 

_The result is a fully automated infrastructure:_ when a new server comes on line, the only thing you have to do is tell Chef what role it should play in your architecture.{color}

h2. Chef Provides
!chefsi.png|border=1,align=right,hspace=14,vspace=6!
h4. {color:#f7681a}Provisioning{color}

Chef invokes system and API calls to automate the provisioning of servers through RESTful API calls or through the command line interface knife. In the case of bare-metal, Chef integrates with things like Kickstart for Linux, Jumpstart for Solaris or NIM for AIX. For virtualized environments, Chef integrates with libvirt and hypervisor specific (XEN, KVM, VMware) API's. In Cloud scenarios Chef can invoke direct cloud API calls to provision servers for platforms such as AWS and vCloud. Chef is also integrated with many of the open source language specific cloud abstractions such as fog for Ruby and jclouds for Java.

h4. {color:#f7681a}Configuration Management{color}

Chef is a fully functional configuration management tool. Roles and Recipes are used to describe how servers should be configured. Chef works by allowing you to write recipes that describe what roles a server (such as Apache, MySQL, or Hadoop) should be configured as. These recipes describe a series of resources that should be in a particular state - for example, packages that should be installed, services that should be running, or files that should be written. Chef then makes sure that each resource is properly configured, only taking corrective action when it's necessary. The result is a safe, flexible mechanism for making sure your servers are always running exactly how you want them to be.

h4. {color:#f7681a}Systems Integration{color}

We like to call systems integration the last mile of fully automated infrastructure. One of the most powerful features of Chef is in its design of separating the configuration data from configuration logic. Data about your infrastructure is dynamically stored and indexed in an NoSQL database and a powerful search API is provided to query information about your infrastructure and applications. In other words Chef recipes can be data driven thereby providing dynamic system integration between servers. For example, when configuring a web server the search API can be called to discover the database and memcache servers and then automatically update the web server's configuration. Likewise a load balancer recipe can automatically add the web servers into its configuration.

\\
\\
\\
\\
\\
\\
\\
{column}
{column:width=5%}
{column}
{section}
{section}
----
{column:width=45%}

!leftarrow.png|align=left,hspace=4! 
[About]

{column}
{column:width=40%}
{column}

{column:width=15%}

!rightarrow.png|align=right,hspace=4! 
[Chef Core Principles]

\\
\\
{column}
{section}
